{
  "array-bracket-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce linebreaks after opening and before closing array brackets in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/array-bracket-newline.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/array-bracket-newline"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["always", "never", "consistent"]
            },
            {
              "type": "object",
              "properties": {
                "multiline": {
                  "type": "boolean"
                },
                "minItems": {
                  "type": ["integer", "null"],
                  "minimum": 0
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "unexpectedOpeningLinebreak": "There should be no linebreak after '['.",
        "unexpectedClosingLinebreak": "There should be no linebreak before ']'.",
        "missingOpeningLinebreak": "A linebreak is required after '['.",
        "missingClosingLinebreak": "A linebreak is required before ']'."
      }
    }
  },
  "array-bracket-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside array brackets in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/array-bracket-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/array-bracket-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "singleValue": {
              "type": "boolean"
            },
            "objectsInArrays": {
              "type": "boolean"
            },
            "arraysInArrays": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedSpaceAfter": "There should be no space after '{{tokenValue}}'.",
        "unexpectedSpaceBefore": "There should be no space before '{{tokenValue}}'.",
        "missingSpaceAfter": "A space is required after '{{tokenValue}}'.",
        "missingSpaceBefore": "A space is required before '{{tokenValue}}'."
      }
    }
  },
  "array-element-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce line breaks after each array element in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/array-element-newline.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/array-element-newline"
      },
      "fixable": "whitespace",
      "schema": {
        "definitions": {
          "basicConfig": {
            "oneOf": [
              {
                "enum": ["always", "never", "consistent"]
              },
              {
                "type": "object",
                "properties": {
                  "multiline": {
                    "type": "boolean"
                  },
                  "minItems": {
                    "type": ["integer", "null"],
                    "minimum": 0
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        },
        "type": "array",
        "items": [
          {
            "oneOf": [
              {
                "$ref": "#/definitions/basicConfig"
              },
              {
                "type": "object",
                "properties": {
                  "ArrayExpression": {
                    "$ref": "#/definitions/basicConfig"
                  },
                  "ArrayPattern": {
                    "$ref": "#/definitions/basicConfig"
                  }
                },
                "additionalProperties": false,
                "minProperties": 1
              }
            ]
          }
        ]
      },
      "messages": {
        "unexpectedLineBreak": "There should be no linebreak here.",
        "missingLineBreak": "There should be a linebreak after this element."
      }
    }
  },
  "arrow-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after the arrow in arrow functions in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/arrow-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/arrow-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean",
              "default": true
            },
            "after": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expectedBefore": "Missing space before =>.",
        "unexpectedBefore": "Unexpected space before =>.",
        "expectedAfter": "Missing space after =>.",
        "unexpectedAfter": "Unexpected space after =>."
      }
    }
  },
  "attribute-hyphenation": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce attribute naming style on custom components in template",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/attribute-hyphenation.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "ignore": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": ":exit$"
                    }
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": "^\\s*$"
                    }
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "attributes-order": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce order of attributes",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/attributes-order.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "order": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "enum": [
                      "DEFINITION",
                      "LIST_RENDERING",
                      "CONDITIONALS",
                      "RENDER_MODIFIERS",
                      "GLOBAL",
                      "UNIQUE",
                      "SLOT",
                      "TWO_WAY_BINDING",
                      "OTHER_DIRECTIVES",
                      "OTHER_ATTR",
                      "ATTR_STATIC",
                      "ATTR_DYNAMIC",
                      "ATTR_SHORTHAND_BOOL",
                      "EVENTS",
                      "CONTENT"
                    ]
                  },
                  {
                    "type": "array",
                    "items": {
                      "enum": [
                        "DEFINITION",
                        "LIST_RENDERING",
                        "CONDITIONALS",
                        "RENDER_MODIFIERS",
                        "GLOBAL",
                        "UNIQUE",
                        "SLOT",
                        "TWO_WAY_BINDING",
                        "OTHER_DIRECTIVES",
                        "OTHER_ATTR",
                        "ATTR_STATIC",
                        "ATTR_DYNAMIC",
                        "ATTR_SHORTHAND_BOOL",
                        "EVENTS",
                        "CONTENT"
                      ],
                      "uniqueItems": true,
                      "additionalItems": false
                    }
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            },
            "alphabetical": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "block-lang": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use other than available `lang`",
        "url": "https://eslint.vuejs.org/rules/block-lang.html"
      },
      "schema": [
        {
          "type": "object",
          "patternProperties": {
            "^(?:\\S+)$": {
              "oneOf": [
                {
                  "type": "object",
                  "properties": {
                    "lang": {
                      "anyOf": [
                        {
                          "type": "string"
                        },
                        {
                          "type": "array",
                          "items": {
                            "type": "string"
                          },
                          "uniqueItems": true,
                          "additionalItems": false
                        }
                      ]
                    },
                    "allowNoLang": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "minProperties": 1,
          "additionalProperties": false
        }
      ],
      "messages": {
        "expected": "Only {{allows}} can be used for the 'lang' attribute of '<{{tag}}>'.",
        "missing": "The 'lang' attribute of '<{{tag}}>' is missing.",
        "unexpected": "Do not specify the 'lang' attribute of '<{{tag}}>'.",
        "useOrNot": "Only {{allows}} can be used for the 'lang' attribute of '<{{tag}}>'. Or, not specifying the `lang` attribute is allowed.",
        "unexpectedDefault": "Do not explicitly specify the default language for the 'lang' attribute of '<{{tag}}>'."
      }
    }
  },
  "block-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Disallow or enforce spaces inside of blocks after opening block and before closing block in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/block-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/block-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        }
      ],
      "messages": {
        "missing": "Requires a space {{location}} '{{token}}'.",
        "extra": "Unexpected space(s) {{location}} '{{token}}'."
      }
    }
  },
  "block-tag-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce line breaks after opening and before closing block-level tags",
        "url": "https://eslint.vuejs.org/rules/block-tag-newline.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "singleline": {
              "enum": ["always", "never", "consistent", "ignore"]
            },
            "multiline": {
              "enum": ["always", "never", "consistent", "ignore"]
            },
            "maxEmptyLines": {
              "type": "number",
              "minimum": 0
            },
            "blocks": {
              "type": "object",
              "patternProperties": {
                "^(?:\\S+)$": {
                  "type": "object",
                  "properties": {
                    "singleline": {
                      "enum": ["always", "never", "consistent", "ignore"]
                    },
                    "multiline": {
                      "enum": ["always", "never", "consistent", "ignore"]
                    },
                    "maxEmptyLines": {
                      "type": "number",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedOpeningLinebreak": "There should be no line break after '<{{tag}}>'.",
        "unexpectedClosingLinebreak": "There should be no line break before '</{{tag}}>'.",
        "expectedOpeningLinebreak": "Expected {{expected}} after '<{{tag}}>', but {{actual}} found.",
        "expectedClosingLinebreak": "Expected {{expected}}  before '</{{tag}}>', but {{actual}} found.",
        "missingOpeningLinebreak": "A line break is required after '<{{tag}}>'.",
        "missingClosingLinebreak": "A line break is required before '</{{tag}}>'."
      }
    }
  },
  "brace-style": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/brace-style.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/brace-style"
      },
      "schema": [
        {
          "enum": ["1tbs", "stroustrup", "allman"]
        },
        {
          "type": "object",
          "properties": {
            "allowSingleLine": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "whitespace",
      "messages": {
        "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
        "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
        "blockSameLine": "Statement inside of curly braces should be on next line.",
        "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
        "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
        "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
      }
    }
  },
  "camelcase": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce camelcase naming convention in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/camelcase.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/camelcase"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreDestructuring": {
              "type": "boolean",
              "default": false
            },
            "ignoreImports": {
              "type": "boolean",
              "default": false
            },
            "ignoreGlobals": {
              "type": "boolean",
              "default": false
            },
            "properties": {
              "enum": ["always", "never"]
            },
            "allow": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                }
              ],
              "minItems": 0,
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "notCamelCase": "Identifier '{{name}}' is not in camel case.",
        "notCamelCasePrivate": "#{{name}} is not in camel case."
      }
    }
  },
  "comma-dangle": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/comma-dangle.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/comma-dangle"
      },
      "fixable": "code",
      "schema": {
        "definitions": {
          "value": {
            "enum": ["always-multiline", "always", "never", "only-multiline"]
          },
          "valueWithIgnore": {
            "enum": [
              "always-multiline",
              "always",
              "ignore",
              "never",
              "only-multiline"
            ]
          }
        },
        "type": "array",
        "items": [
          {
            "oneOf": [
              {
                "$ref": "#/definitions/value"
              },
              {
                "type": "object",
                "properties": {
                  "arrays": {
                    "$ref": "#/definitions/valueWithIgnore"
                  },
                  "objects": {
                    "$ref": "#/definitions/valueWithIgnore"
                  },
                  "imports": {
                    "$ref": "#/definitions/valueWithIgnore"
                  },
                  "exports": {
                    "$ref": "#/definitions/valueWithIgnore"
                  },
                  "functions": {
                    "$ref": "#/definitions/valueWithIgnore"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "additionalItems": false
      },
      "messages": {
        "unexpected": "Unexpected trailing comma.",
        "missing": "Missing trailing comma."
      }
    }
  },
  "comma-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/comma-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean",
              "default": false
            },
            "after": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missing": "A space is required {{loc}} ','.",
        "unexpected": "There should be no space {{loc}} ','."
      }
    }
  },
  "comma-style": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent comma style in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/comma-style.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/comma-style"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["first", "last"]
        },
        {
          "type": "object",
          "properties": {
            "exceptions": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedLineBeforeAndAfterComma": "Bad line breaking before and after ','.",
        "expectedCommaFirst": "',' should be placed first.",
        "expectedCommaLast": "',' should be placed last."
      }
    }
  },
  "comment-directive": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "support comment-directives in `<template>`",
        "categories": ["base"],
        "url": "https://eslint.vuejs.org/rules/comment-directive.html"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "reportUnusedDisableDirectives": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "disableBlock": "--block {{key}}",
        "enableBlock": "++block",
        "disableLine": "--line {{key}}",
        "enableLine": "++line",
        "disableBlockRule": "-block {{rule}} {{key}}",
        "enableBlockRule": "+block {{rule}}",
        "disableLineRule": "-line {{rule}} {{key}}",
        "enableLineRule": "+line {{rule}}",
        "clear": "clear",
        "unused": "Unused {{kind}} directive (no problems were reported).",
        "unusedRule": "Unused {{kind}} directive (no problems were reported from '{{rule}}')."
      }
    }
  },
  "component-api-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce component API style",
        "url": "https://eslint.vuejs.org/rules/component-api-style.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "array",
          "items": {
            "enum": [
              "script-setup",
              "composition",
              "composition-vue2",
              "options"
            ],
            "uniqueItems": true,
            "additionalItems": false
          },
          "minItems": 1
        }
      ],
      "messages": {
        "disallowScriptSetup": "`<script setup>` is not allowed in your project. Use {{allowedApis}} instead.",
        "disallowComponentOption": "{{disallowedApi}} is not allowed in your project. {{optionPhrase}} is part of the {{disallowedApi}}. Use {{allowedApis}} instead.",
        "disallowComponentOptionPreferScriptSetup": "{{disallowedApi}} is not allowed in your project. Use `<script setup>` instead."
      }
    }
  },
  "component-definition-name-casing": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce specific casing for component definition name",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/component-definition-name-casing.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["PascalCase", "kebab-case"]
        }
      ]
    }
  },
  "component-name-in-template-casing": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce specific casing for the component naming style in template",
        "url": "https://eslint.vuejs.org/rules/component-name-in-template-casing.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["PascalCase", "kebab-case"]
        },
        {
          "type": "object",
          "properties": {
            "globals": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "ignores": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "additionalItems": false
            },
            "registeredComponentsOnly": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "component-options-name-casing": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce the casing of component name in `components` options",
        "url": "https://eslint.vuejs.org/rules/component-options-name-casing.html"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "schema": [
        {
          "enum": ["camelCase", "kebab-case", "PascalCase"]
        }
      ],
      "messages": {
        "caseNotMatched": "Component name \"{{component}}\" is not {{caseType}}.",
        "possibleRenaming": "Rename component name to be in {{caseType}}."
      }
    }
  },
  "component-tags-order": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce order of component top-level elements",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/component-tags-order.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "order": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "'<{{elementName}}{{elementAttributes}}>' should be above '<{{firstUnorderedName}}{{firstUnorderedAttributes}}>' on line {{line}}."
      }
    }
  },
  "custom-event-name-casing": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce specific casing for custom event name",
        "url": "https://eslint.vuejs.org/rules/custom-event-name-casing.html"
      },
      "fixable": null,
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["kebab-case", "camelCase"]
              },
              {
                "type": "object",
                "properties": {
                  "ignores": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true,
                    "additionalItems": false
                  }
                },
                "additionalProperties": false
              }
            ]
          },
          {
            "type": "array",
            "items": [
              {
                "type": "object",
                "properties": {
                  "ignores": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "uniqueItems": true,
                    "additionalItems": false
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ]
      },
      "messages": {
        "unexpected": "Custom event name '{{name}}' must be {{caseType}}."
      }
    }
  },
  "define-emits-declaration": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce declaration style of `defineEmits`",
        "url": "https://eslint.vuejs.org/rules/define-emits-declaration.html"
      },
      "fixable": null,
      "messages": {
        "hasArg": "Use type-based declaration instead of runtime declaration.",
        "hasTypeArg": "Use runtime declaration instead of type-based declaration."
      },
      "schema": [
        {
          "enum": ["type-based", "runtime"]
        }
      ]
    }
  },
  "define-macros-order": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce order of `defineEmits` and `defineProps` compiler macros",
        "url": "https://eslint.vuejs.org/rules/define-macros-order.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "order": {
              "type": "array",
              "items": {
                "enum": ["defineEmits", "defineProps"]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "macrosNotOnTop": "{{macro}} should be the first statement in `<script setup>` (after any potential import statements or type definitions)."
      }
    }
  },
  "define-props-declaration": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce declaration style of `defineProps`",
        "url": "https://eslint.vuejs.org/rules/define-props-declaration.html"
      },
      "fixable": null,
      "messages": {
        "hasArg": "Use type-based declaration instead of runtime declaration.",
        "hasTypeArg": "Use runtime declaration instead of type-based declaration."
      },
      "schema": [
        {
          "enum": ["type-based", "runtime"]
        }
      ]
    }
  },
  "dot-location": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent newlines before and after dots in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/dot-location.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/dot-location"
      },
      "schema": [
        {
          "enum": ["object", "property"]
        }
      ],
      "fixable": "code",
      "messages": {
        "expectedDotAfterObject": "Expected dot to be on same line as object.",
        "expectedDotBeforeProperty": "Expected dot to be on same line as property."
      }
    }
  },
  "dot-notation": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce dot notation whenever possible in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/dot-notation.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/dot-notation"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowKeywords": {
              "type": "boolean",
              "default": true
            },
            "allowPattern": {
              "type": "string",
              "default": ""
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code",
      "messages": {
        "useDot": "[{{key}}] is better written in dot notation.",
        "useBrackets": ".{{key}} is a syntax error."
      }
    }
  },
  "eqeqeq": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require the use of `===` and `!==` in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/eqeqeq.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/eqeqeq"
      },
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["always"]
              },
              {
                "type": "object",
                "properties": {
                  "null": {
                    "enum": ["always", "never", "ignore"]
                  }
                },
                "additionalProperties": false
              }
            ],
            "additionalItems": false
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["smart", "allow-null"]
              }
            ],
            "additionalItems": false
          }
        ]
      },
      "fixable": "code",
      "messages": {
        "unexpected": "Expected '{{expectedOperator}}' and instead saw '{{actualOperator}}'."
      }
    }
  },
  "first-attribute-linebreak": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce the location of first attribute",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/first-attribute-linebreak.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "multiline": {
              "enum": ["below", "beside", "ignore"]
            },
            "singleline": {
              "enum": ["below", "beside", "ignore"]
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expected": "Expected a linebreak before this attribute.",
        "unexpected": "Expected no linebreak before this attribute."
      }
    }
  },
  "func-call-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/func-call-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["never"]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["always"]
              },
              {
                "type": "object",
                "properties": {
                  "allowNewlines": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
        "unexpectedNewline": "Unexpected newline between function name and paren.",
        "missing": "Missing space between function name and paren."
      }
    }
  },
  "html-button-has-type": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow usage of button without an explicit type attribute",
        "categories": null,
        "url": "https://eslint.vuejs.org/rules/html-button-has-type.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "button": {
              "default": true,
              "type": "boolean"
            },
            "submit": {
              "default": true,
              "type": "boolean"
            },
            "reset": {
              "default": true,
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missingTypeAttribute": "Missing an explicit type attribute for button.",
        "invalidTypeAttribute": "{{value}} is an invalid value for button type attribute.",
        "forbiddenTypeAttribute": "{{value}} is a forbidden value for button type attribute.",
        "emptyTypeAttribute": "A value must be set for button type attribute."
      }
    }
  },
  "html-closing-bracket-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require or disallow a line break before tag's closing brackets",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-closing-bracket-newline.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "singleline": {
              "enum": ["always", "never"]
            },
            "multiline": {
              "enum": ["always", "never"]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "html-closing-bracket-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require or disallow a space before tag's closing brackets",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-closing-bracket-spacing.html"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "startTag": {
              "enum": ["always", "never"]
            },
            "endTag": {
              "enum": ["always", "never"]
            },
            "selfClosingTag": {
              "enum": ["always", "never"]
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "whitespace"
    }
  },
  "html-comment-content-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce unified line brake in HTML comments",
        "url": "https://eslint.vuejs.org/rules/html-comment-content-newline.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "enum": ["always", "never"]
            },
            {
              "type": "object",
              "properties": {
                "singleline": {
                  "enum": ["always", "never", "ignore"]
                },
                "multiline": {
                  "enum": ["always", "never", "ignore"]
                }
              },
              "additionalProperties": false
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "exceptions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expectedAfterHTMLCommentOpen": "Expected line break after '<!--'.",
        "expectedBeforeHTMLCommentOpen": "Expected line break before '-->'.",
        "expectedAfterExceptionBlock": "Expected line break after exception block.",
        "expectedBeforeExceptionBlock": "Expected line break before exception block.",
        "unexpectedAfterHTMLCommentOpen": "Unexpected line breaks after '<!--'.",
        "unexpectedBeforeHTMLCommentOpen": "Unexpected line breaks before '-->'."
      }
    }
  },
  "html-comment-content-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce unified spacing in HTML comments",
        "url": "https://eslint.vuejs.org/rules/html-comment-content-spacing.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "exceptions": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expectedAfterHTMLCommentOpen": "Expected space after '<!--'.",
        "expectedBeforeHTMLCommentOpen": "Expected space before '-->'.",
        "expectedAfterExceptionBlock": "Expected space after exception block.",
        "expectedBeforeExceptionBlock": "Expected space before exception block.",
        "unexpectedAfterHTMLCommentOpen": "Unexpected space after '<!--'.",
        "unexpectedBeforeHTMLCommentOpen": "Unexpected space before '-->'."
      }
    }
  },
  "html-comment-indent": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce consistent indentation in HTML comments",
        "url": "https://eslint.vuejs.org/rules/html-comment-indent.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 0
            },
            {
              "enum": ["tab"]
            }
          ]
        }
      ],
      "messages": {
        "unexpectedBaseIndentation": "Expected base point indentation of {{expected}}, but found {{actual}}.",
        "missingBaseIndentation": "Expected base point indentation of {{expected}}, but not found.",
        "unexpectedIndentationCharacter": "Expected {{expected}} character, but found {{actual}} character.",
        "unexpectedIndentation": "Expected indentation of {{expected}} but found {{actual}}.",
        "unexpectedRelativeIndentation": "Expected relative indentation of {{expected}} but found {{actual}}."
      }
    }
  },
  "html-end-tags": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce end tag style",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-end-tags.html"
      },
      "fixable": "code",
      "schema": []
    }
  },
  "html-indent": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce consistent indentation in `<template>`",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-indent.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "enum": ["tab"]
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "attribute": {
              "type": "integer",
              "minimum": 0
            },
            "baseIndent": {
              "type": "integer",
              "minimum": 0
            },
            "closeBracket": {
              "anyOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "type": "object",
                  "properties": {
                    "startTag": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "endTag": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "selfClosingTag": {
                      "type": "integer",
                      "minimum": 0
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "switchCase": {
              "type": "integer",
              "minimum": 0
            },
            "alignAttributesVertically": {
              "type": "boolean"
            },
            "ignores": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": ":exit$"
                    }
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": "^\\s*$"
                    }
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "html-quotes": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce quotes style of HTML attributes",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-quotes.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["double", "single"]
        },
        {
          "type": "object",
          "properties": {
            "avoidEscape": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "html-self-closing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce self-closing style",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/html-self-closing.html"
      },
      "fixable": "code",
      "schema": {
        "definitions": {
          "optionValue": {
            "enum": ["always", "never", "any"]
          }
        },
        "type": "array",
        "items": [
          {
            "type": "object",
            "properties": {
              "html": {
                "type": "object",
                "properties": {
                  "normal": {
                    "$ref": "#/definitions/optionValue"
                  },
                  "void": {
                    "$ref": "#/definitions/optionValue"
                  },
                  "component": {
                    "$ref": "#/definitions/optionValue"
                  }
                },
                "additionalProperties": false
              },
              "svg": {
                "$ref": "#/definitions/optionValue"
              },
              "math": {
                "$ref": "#/definitions/optionValue"
              }
            },
            "additionalProperties": false
          }
        ],
        "maxItems": 1
      }
    }
  },
  "jsx-uses-vars": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "prevent variables used in JSX to be marked as unused",
        "categories": ["base"],
        "url": "https://eslint.vuejs.org/rules/jsx-uses-vars.html"
      },
      "schema": []
    }
  },
  "key-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between keys and values in object literal properties in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/key-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/key-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "align": {
                  "anyOf": [
                    {
                      "enum": ["colon", "value"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "mode": {
                          "enum": ["strict", "minimum"]
                        },
                        "on": {
                          "enum": ["colon", "value"]
                        },
                        "beforeColon": {
                          "type": "boolean"
                        },
                        "afterColon": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                },
                "mode": {
                  "enum": ["strict", "minimum"]
                },
                "beforeColon": {
                  "type": "boolean"
                },
                "afterColon": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "singleLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "multiLine": {
                  "type": "object",
                  "properties": {
                    "align": {
                      "anyOf": [
                        {
                          "enum": ["colon", "value"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "enum": ["strict", "minimum"]
                            },
                            "on": {
                              "enum": ["colon", "value"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "singleLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "multiLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "align": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "on": {
                      "enum": ["colon", "value"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "extraKey": "Extra space after {{computed}}key '{{key}}'.",
        "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
        "missingKey": "Missing space after {{computed}}key '{{key}}'.",
        "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
      }
    }
  },
  "keyword-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/keyword-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean",
              "default": true
            },
            "after": {
              "type": "boolean",
              "default": true
            },
            "overrides": {
              "type": "object",
              "properties": {
                "abstract": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "as": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "async": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "await": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "boolean": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "break": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "byte": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "case": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "catch": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "char": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "class": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "const": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "continue": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "debugger": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "default": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "delete": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "do": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "double": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "else": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "enum": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "export": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "extends": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "false": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "final": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "finally": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "float": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "for": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "from": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "function": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "get": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "goto": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "if": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "implements": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "import": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "in": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "instanceof": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "int": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "interface": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "let": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "long": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "native": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "null": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "of": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "package": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "private": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "protected": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "public": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "return": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "set": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "short": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "static": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "super": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "switch": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "synchronized": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "this": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "throw": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "throws": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "transient": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "true": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "try": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "typeof": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "var": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "void": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "volatile": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "while": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "with": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "yield": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expectedBefore": "Expected space(s) before \"{{value}}\".",
        "expectedAfter": "Expected space(s) after \"{{value}}\".",
        "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
        "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
      }
    }
  },
  "match-component-file-name": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "require component name property to match its file name",
        "url": "https://eslint.vuejs.org/rules/match-component-file-name.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "extensions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "additionalItems": false
            },
            "shouldMatchCase": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "match-component-import-name": {
    "meta": {
      "type": "problem",
      "schema": [],
      "docs": {
        "description": "require the registered component name to match the imported component name",
        "url": "https://eslint.vuejs.org/rules/match-component-import-name.html"
      },
      "fixable": null,
      "messages": {
        "unexpected": "Component alias {{importedName}} should be one of: {{expectedName}}."
      }
    }
  },
  "max-attributes-per-line": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce the maximum number of attributes per line",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/max-attributes-per-line.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "singleline": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "number",
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "multiline": {
              "anyOf": [
                {
                  "type": "number",
                  "minimum": 1
                },
                {
                  "type": "object",
                  "properties": {
                    "max": {
                      "type": "number",
                      "minimum": 1
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "max-len": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce a maximum line length in `.vue` files",
        "url": "https://eslint.vuejs.org/rules/max-len.html",
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/max-len"
      },
      "schema": [
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "minimum": 0
                },
                "template": {
                  "type": "integer",
                  "minimum": 0
                },
                "comments": {
                  "type": "integer",
                  "minimum": 0
                },
                "tabWidth": {
                  "type": "integer",
                  "minimum": 0
                },
                "ignorePattern": {
                  "type": "string"
                },
                "ignoreComments": {
                  "type": "boolean"
                },
                "ignoreTrailingComments": {
                  "type": "boolean"
                },
                "ignoreUrls": {
                  "type": "boolean"
                },
                "ignoreStrings": {
                  "type": "boolean"
                },
                "ignoreTemplateLiterals": {
                  "type": "boolean"
                },
                "ignoreRegExpLiterals": {
                  "type": "boolean"
                },
                "ignoreHTMLAttributeValues": {
                  "type": "boolean"
                },
                "ignoreHTMLTextContents": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "integer",
              "minimum": 0
            }
          ]
        },
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer",
                  "minimum": 0
                },
                "template": {
                  "type": "integer",
                  "minimum": 0
                },
                "comments": {
                  "type": "integer",
                  "minimum": 0
                },
                "tabWidth": {
                  "type": "integer",
                  "minimum": 0
                },
                "ignorePattern": {
                  "type": "string"
                },
                "ignoreComments": {
                  "type": "boolean"
                },
                "ignoreTrailingComments": {
                  "type": "boolean"
                },
                "ignoreUrls": {
                  "type": "boolean"
                },
                "ignoreStrings": {
                  "type": "boolean"
                },
                "ignoreTemplateLiterals": {
                  "type": "boolean"
                },
                "ignoreRegExpLiterals": {
                  "type": "boolean"
                },
                "ignoreHTMLAttributeValues": {
                  "type": "boolean"
                },
                "ignoreHTMLTextContents": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "integer",
              "minimum": 0
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "minimum": 0
            },
            "template": {
              "type": "integer",
              "minimum": 0
            },
            "comments": {
              "type": "integer",
              "minimum": 0
            },
            "tabWidth": {
              "type": "integer",
              "minimum": 0
            },
            "ignorePattern": {
              "type": "string"
            },
            "ignoreComments": {
              "type": "boolean"
            },
            "ignoreTrailingComments": {
              "type": "boolean"
            },
            "ignoreUrls": {
              "type": "boolean"
            },
            "ignoreStrings": {
              "type": "boolean"
            },
            "ignoreTemplateLiterals": {
              "type": "boolean"
            },
            "ignoreRegExpLiterals": {
              "type": "boolean"
            },
            "ignoreHTMLAttributeValues": {
              "type": "boolean"
            },
            "ignoreHTMLTextContents": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "max": "This line has a length of {{lineLength}}. Maximum allowed is {{maxLength}}.",
        "maxComment": "This line has a comment length of {{lineLength}}. Maximum allowed is {{maxCommentLength}}."
      }
    }
  },
  "multi-word-component-names": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require component names to be always multi-word",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/multi-word-component-names.html"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignores": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "Component name \"{{value}}\" should always be multi-word."
      }
    }
  },
  "multiline-html-element-content-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require a line break before and after the contents of a multiline element",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/multiline-html-element-content-newline.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreWhenEmpty": {
              "type": "boolean"
            },
            "ignores": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "additionalItems": false
            },
            "allowEmptyLines": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedAfterClosingBracket": "Expected 1 line break after opening tag (`<{{name}}>`), but {{actual}} line breaks found.",
        "unexpectedBeforeOpeningBracket": "Expected 1 line break before closing tag (`</{{name}}>`), but {{actual}} line breaks found."
      }
    }
  },
  "multiline-ternary": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce newlines between operands of ternary expressions in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/multiline-ternary.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/multiline-ternary"
      },
      "schema": [
        {
          "enum": ["always", "always-multiline", "never"]
        }
      ],
      "messages": {
        "expectedTestCons": "Expected newline between test and consequent of ternary expression.",
        "expectedConsAlt": "Expected newline between consequent and alternate of ternary expression.",
        "unexpectedTestCons": "Unexpected newline between test and consequent of ternary expression.",
        "unexpectedConsAlt": "Unexpected newline between consequent and alternate of ternary expression."
      },
      "fixable": "whitespace"
    }
  },
  "mustache-interpolation-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce unified spacing in mustache interpolations",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/mustache-interpolation-spacing.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        }
      ]
    }
  },
  "new-line-between-multi-line-property": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce new lines between multi-line properties in Vue components",
        "url": "https://eslint.vuejs.org/rules/new-line-between-multi-line-property.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "minLineOfMultilineProperty": {
              "type": "number",
              "minimum": 2
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "next-tick-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce Promise or callback style in `nextTick`",
        "url": "https://eslint.vuejs.org/rules/next-tick-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["promise", "callback"]
        }
      ]
    }
  },
  "no-arrow-functions-in-watch": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using arrow functions to define watcher",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-arrow-functions-in-watch.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-async-in-computed-properties": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow asynchronous actions in computed properties",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-async-in-computed-properties.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-bare-strings-in-template": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of bare strings in `<template>`",
        "url": "https://eslint.vuejs.org/rules/no-bare-strings-in-template.html"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowlist": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "attributes": {
              "type": "object",
              "patternProperties": {
                "^(?:\\S+|/.*/[a-z]*)$": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "uniqueItems": true
                }
              },
              "additionalProperties": false
            },
            "directives": {
              "type": "array",
              "items": {
                "type": "string",
                "pattern": "^v-"
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "Unexpected non-translated string used.",
        "unexpectedInAttr": "Unexpected non-translated string used in `{{attr}}`."
      }
    }
  },
  "no-boolean-default": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow boolean defaults",
        "url": "https://eslint.vuejs.org/rules/no-boolean-default.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["default-false", "no-default"]
        }
      ]
    }
  },
  "no-child-content": {
    "meta": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "disallow element's child contents which would be overwritten by a directive like `v-html` or `v-text`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-child-content.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "additionalDirectives": {
              "type": "array",
              "uniqueItems": true,
              "minItems": 1,
              "items": {
                "type": "string"
              }
            }
          },
          "required": ["additionalDirectives"]
        }
      ]
    }
  },
  "no-computed-properties-in-data": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow accessing computed properties in `data`.",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-computed-properties-in-data.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "cannotBeUsed": "The computed property cannot be used in `data()` because it is before initialization."
      }
    }
  },
  "no-constant-condition": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow constant expressions in conditions in `<template>`",
        "recommended": true,
        "url": "https://eslint.vuejs.org/rules/no-constant-condition.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-constant-condition"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "checkLoops": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "Unexpected constant condition."
      }
    }
  },
  "no-custom-modifiers-on-v-model": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow custom modifiers on v-model used on the component",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/no-custom-modifiers-on-v-model.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "notSupportedModifier": "'v-model' directives don't support the modifier '{{name}}'."
      }
    }
  },
  "no-deprecated-data-object-declaration": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated object declaration on data (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-data-object-declaration.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "objectDeclarationIsDeprecated": "Object declaration on 'data' property is deprecated. Using function declaration instead."
      }
    }
  },
  "no-deprecated-destroyed-lifecycle": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `destroyed` and `beforeDestroy` lifecycle hooks (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-destroyed-lifecycle.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "deprecatedDestroyed": "The `destroyed` lifecycle hook is deprecated. Use `unmounted` instead.",
        "deprecatedBeforeDestroy": "The `beforeDestroy` lifecycle hook is deprecated. Use `beforeUnmount` instead."
      }
    }
  },
  "no-deprecated-dollar-listeners-api": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `$listeners` (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-dollar-listeners-api.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "deprecated": "The `$listeners` is deprecated."
      }
    }
  },
  "no-deprecated-dollar-scopedslots-api": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `$scopedSlots` (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-dollar-scopedslots-api.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "deprecated": "The `$scopedSlots` is deprecated."
      }
    }
  },
  "no-deprecated-events-api": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated events api (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-events-api.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "noDeprecatedEventsApi": "The Events api `$on`, `$off` `$once` is deprecated. Using external library instead, for example mitt."
      }
    }
  },
  "no-deprecated-filter": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated filters syntax (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-filter.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "noDeprecatedFilter": "Filters are deprecated."
      }
    }
  },
  "no-deprecated-functional-template": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated the `functional` template (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-functional-template.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "The `functional` template are deprecated."
      }
    }
  },
  "no-deprecated-html-element-is": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated the `is` attribute on HTML elements (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-html-element-is.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "The `is` attribute on HTML element are deprecated."
      }
    }
  },
  "no-deprecated-inline-template": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `inline-template` attribute (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-inline-template.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "`inline-template` are deprecated."
      }
    }
  },
  "no-deprecated-props-default-this": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow deprecated `this` access in props default function (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-props-default-this.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "deprecated": "Props default value factory functions no longer have access to `this`."
      }
    }
  },
  "no-deprecated-router-link-tag-prop": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `tag` property on `RouterLink` (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-router-link-tag-prop.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "components": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "minItems": 1
            }
          }
        }
      ],
      "messages": {
        "deprecated": "'tag' property on '{{element}}' component is deprecated. Use scoped slots instead."
      }
    }
  },
  "no-deprecated-scope-attribute": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow deprecated `scope` attribute (in Vue.js 2.5.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-scope-attribute.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "forbiddenScopeAttribute": "`scope` attributes are deprecated."
      }
    }
  },
  "no-deprecated-slot-attribute": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow deprecated `slot` attribute (in Vue.js 2.6.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-slot-attribute.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "forbiddenSlotAttribute": "`slot` attributes are deprecated."
      }
    }
  },
  "no-deprecated-slot-scope-attribute": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow deprecated `slot-scope` attribute (in Vue.js 2.6.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-slot-scope-attribute.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "forbiddenSlotScopeAttribute": "`slot-scope` are deprecated."
      }
    }
  },
  "no-deprecated-v-bind-sync": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow use of deprecated `.sync` modifier on `v-bind` directive (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-v-bind-sync.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "syncModifierIsDeprecated": "'.sync' modifier on 'v-bind' directive is deprecated. Use 'v-model:propName' instead."
      }
    }
  },
  "no-deprecated-v-is": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow deprecated `v-is` directive (in Vue.js 3.1.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-v-is.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "forbiddenVIs": "`v-is` directive is deprecated."
      }
    }
  },
  "no-deprecated-v-on-native-modifier": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `.native` modifiers (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-v-on-native-modifier.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "deprecated": "'.native' modifier on 'v-on' directive is deprecated."
      }
    }
  },
  "no-deprecated-v-on-number-modifiers": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated number (keycode) modifiers (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-v-on-number-modifiers.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "numberModifierIsDeprecated": "'KeyboardEvent.keyCode' modifier on 'v-on' directive is deprecated. Using 'KeyboardEvent.key' instead."
      }
    }
  },
  "no-deprecated-vue-config-keycodes": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow using deprecated `Vue.config.keyCodes` (in Vue.js 3.0.0+)",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-deprecated-vue-config-keycodes.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "`Vue.config.keyCodes` are deprecated."
      }
    }
  },
  "no-dupe-keys": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow duplication of field names",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-dupe-keys.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-dupe-v-else-if": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow duplicate conditions in `v-if` / `v-else-if` chains",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-dupe-v-else-if.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "This branch can never execute. Its condition is a duplicate or covered by previous conditions in the `v-if` / `v-else-if` chain."
      }
    }
  },
  "no-duplicate-attr-inheritance": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce `inheritAttrs` to be set to `false` when using `v-bind=\"$attrs\"`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/no-duplicate-attr-inheritance.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-duplicate-attributes": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow duplication of attributes",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-duplicate-attributes.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowCoexistClass": {
              "type": "boolean"
            },
            "allowCoexistStyle": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-empty-component-block": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the `<template>` `<script>` `<style>` block to be empty",
        "url": "https://eslint.vuejs.org/rules/no-empty-component-block.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "`<{{ blockName }}>` is empty. Empty block is not allowed."
      }
    }
  },
  "no-empty-pattern": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow empty destructuring patterns in `<template>`",
        "recommended": true,
        "url": "https://eslint.vuejs.org/rules/no-empty-pattern.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-empty-pattern"
      },
      "schema": [],
      "messages": {
        "unexpected": "Unexpected empty {{type}} pattern."
      }
    }
  },
  "no-export-in-script-setup": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow `export` in `<script setup>`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-export-in-script-setup.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "forbidden": "`<script setup>` cannot contain ES module exports."
      }
    }
  },
  "no-expose-after-await": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow asynchronously registered `expose`",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-expose-after-await.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "forbidden": "`{{name}}` is forbidden after an `await` expression."
      }
    }
  },
  "no-extra-parens": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/no-extra-parens.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-extra-parens"
      },
      "fixable": "code",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["functions"]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["all"]
              },
              {
                "type": "object",
                "properties": {
                  "conditionalAssign": {
                    "type": "boolean"
                  },
                  "nestedBinaryExpressions": {
                    "type": "boolean"
                  },
                  "returnAssign": {
                    "type": "boolean"
                  },
                  "ignoreJSX": {
                    "enum": ["none", "all", "single-line", "multi-line"]
                  },
                  "enforceForArrowConditionals": {
                    "type": "boolean"
                  },
                  "enforceForSequenceExpressions": {
                    "type": "boolean"
                  },
                  "enforceForNewInMemberExpressions": {
                    "type": "boolean"
                  },
                  "enforceForFunctionPrototypeMethods": {
                    "type": "boolean"
                  },
                  "allowParensAfterCommentPattern": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "unexpected": "Unnecessary parentheses around expression."
      }
    }
  },
  "no-invalid-model-keys": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require valid keys in model option",
        "url": "https://eslint.vuejs.org/rules/no-invalid-model-keys.html"
      },
      "fixable": null,
      "schema": [],
      "deprecated": true,
      "replacedBy": ["valid-model-definition"]
    }
  },
  "no-irregular-whitespace": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow irregular whitespace in `.vue` files",
        "url": "https://eslint.vuejs.org/rules/no-irregular-whitespace.html",
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-irregular-whitespace"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "skipComments": {
              "type": "boolean",
              "default": false
            },
            "skipStrings": {
              "type": "boolean",
              "default": true
            },
            "skipTemplates": {
              "type": "boolean",
              "default": false
            },
            "skipRegExps": {
              "type": "boolean",
              "default": false
            },
            "skipHTMLAttributeValues": {
              "type": "boolean",
              "default": false
            },
            "skipHTMLTextContents": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "disallow": "Irregular whitespace not allowed."
      }
    }
  },
  "no-lifecycle-after-await": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow asynchronously registered lifecycle hooks",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-lifecycle-after-await.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "forbidden": "Lifecycle hooks are forbidden after an `await` expression."
      }
    }
  },
  "no-lone-template": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow unnecessary `<template>`",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/no-lone-template.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreAccessible": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "requireDirective": "`<template>` require directive."
      }
    }
  },
  "no-loss-of-precision": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow literal numbers that lose precision in `<template>`",
        "recommended": true,
        "url": "https://eslint.vuejs.org/rules/no-loss-of-precision.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-loss-of-precision"
      },
      "schema": [],
      "messages": {
        "noLossOfPrecision": "This number literal will lose precision at runtime."
      }
    }
  },
  "no-multi-spaces": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "disallow multiple spaces",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/no-multi-spaces.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreProperties": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-multiple-objects-in-class": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow to pass multiple objects into array to class",
        "url": "https://eslint.vuejs.org/rules/no-multiple-objects-in-class.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "Unexpected multiple objects. Merge objects."
      }
    }
  },
  "no-multiple-slot-args": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow to pass multiple arguments to scoped slots",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/no-multiple-slot-args.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "Unexpected multiple arguments.",
        "unexpectedSpread": "Unexpected spread argument."
      }
    }
  },
  "no-multiple-template-root": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow adding multiple root nodes to the template",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/no-multiple-template-root.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-mutating-props": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow mutation of component props",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-mutating-props.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-parsing-error": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow parsing errors in `<template>`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-parsing-error.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "abrupt-closing-of-empty-comment": {
              "type": "boolean"
            },
            "absence-of-digits-in-numeric-character-reference": {
              "type": "boolean"
            },
            "cdata-in-html-content": {
              "type": "boolean"
            },
            "character-reference-outside-unicode-range": {
              "type": "boolean"
            },
            "control-character-in-input-stream": {
              "type": "boolean"
            },
            "control-character-reference": {
              "type": "boolean"
            },
            "eof-before-tag-name": {
              "type": "boolean"
            },
            "eof-in-cdata": {
              "type": "boolean"
            },
            "eof-in-comment": {
              "type": "boolean"
            },
            "eof-in-tag": {
              "type": "boolean"
            },
            "incorrectly-closed-comment": {
              "type": "boolean"
            },
            "incorrectly-opened-comment": {
              "type": "boolean"
            },
            "invalid-first-character-of-tag-name": {
              "type": "boolean"
            },
            "missing-attribute-value": {
              "type": "boolean"
            },
            "missing-end-tag-name": {
              "type": "boolean"
            },
            "missing-semicolon-after-character-reference": {
              "type": "boolean"
            },
            "missing-whitespace-between-attributes": {
              "type": "boolean"
            },
            "nested-comment": {
              "type": "boolean"
            },
            "noncharacter-character-reference": {
              "type": "boolean"
            },
            "noncharacter-in-input-stream": {
              "type": "boolean"
            },
            "null-character-reference": {
              "type": "boolean"
            },
            "surrogate-character-reference": {
              "type": "boolean"
            },
            "surrogate-in-input-stream": {
              "type": "boolean"
            },
            "unexpected-character-in-attribute-name": {
              "type": "boolean"
            },
            "unexpected-character-in-unquoted-attribute-value": {
              "type": "boolean"
            },
            "unexpected-equals-sign-before-attribute-name": {
              "type": "boolean"
            },
            "unexpected-null-character": {
              "type": "boolean"
            },
            "unexpected-question-mark-instead-of-tag-name": {
              "type": "boolean"
            },
            "unexpected-solidus-in-tag": {
              "type": "boolean"
            },
            "unknown-named-character-reference": {
              "type": "boolean"
            },
            "end-tag-with-attributes": {
              "type": "boolean"
            },
            "duplicate-attribute": {
              "type": "boolean"
            },
            "end-tag-with-trailing-solidus": {
              "type": "boolean"
            },
            "non-void-html-element-start-tag-with-trailing-solidus": {
              "type": "boolean"
            },
            "x-invalid-end-tag": {
              "type": "boolean"
            },
            "x-invalid-namespace": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-potential-component-option-typo": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "disallow a potential typo in your component property",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/no-potential-component-option-typo.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "presets": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": ["all", "vue", "vue-router", "nuxt"]
              },
              "uniqueItems": true,
              "minItems": 0
            },
            "custom": {
              "type": "array",
              "minItems": 0,
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            },
            "threshold": {
              "type": "number",
              "minimum": 1
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-ref-as-operand": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use of value wrapped by `ref()` (Composition API) as an operand",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-ref-as-operand.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "requireDotValue": "Must use `.value` to read or write the value wrapped by `{{method}}()`."
      }
    }
  },
  "no-ref-object-destructure": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow destructuring of ref objects that can lead to loss of reactivity",
        "url": "https://eslint.vuejs.org/rules/no-ref-object-destructure.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "getValueInSameScope": "Getting a value from the ref object in the same scope will cause the value to lose reactivity.",
        "getReactiveVariableInSameScope": "Getting a reactive variable in the same scope will cause the value to lose reactivity."
      }
    }
  },
  "no-required-prop-with-default": {
    "meta": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "enforce props with default values to be optional",
        "url": "https://eslint.vuejs.org/rules/no-required-prop-with-default.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "autofix": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "requireOptional": "Prop \"{{ key }}\" should be optional.",
        "fixRequiredProp": "Change this prop to be optional."
      }
    }
  },
  "no-reserved-component-names": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow the use of reserved names in component definitions",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-reserved-component-names.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "disallowVueBuiltInComponents": {
              "type": "boolean"
            },
            "disallowVue3BuiltInComponents": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "reserved": "Name \"{{name}}\" is reserved.",
        "reservedInHtml": "Name \"{{name}}\" is reserved in HTML.",
        "reservedInVue": "Name \"{{name}}\" is reserved in Vue.js.",
        "reservedInVue3": "Name \"{{name}}\" is reserved in Vue.js 3.x."
      }
    }
  },
  "no-reserved-keys": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow overwriting reserved keys",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-reserved-keys.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "reserved": {
              "type": "array"
            },
            "groups": {
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "reserved": "Key '{{name}}' is reserved.",
        "startsWithUnderscore": "Keys starting with '_' are reserved in '{{name}}' group."
      }
    }
  },
  "no-reserved-props": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow reserved names in props",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-reserved-props.html",
        "defaultOptions": {
          "vue2": [
            {
              "vueVersion": 2
            }
          ]
        }
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "vueVersion": {
              "enum": [2, 3]
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "reserved": "'{{propName}}' is a reserved attribute and cannot be used as props."
      }
    }
  },
  "no-restricted-block": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specific block",
        "url": "https://eslint.vuejs.org/rules/no-restricted-block.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "element": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": ["element"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedBlock": "{{message}}"
      }
    }
  },
  "no-restricted-call-after-await": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow asynchronously called restricted methods",
        "url": "https://eslint.vuejs.org/rules/no-restricted-call-after-await.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "module": {
              "type": "string"
            },
            "path": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              ]
            },
            "message": {
              "type": "string",
              "minLength": 1
            }
          },
          "required": ["module"],
          "additionalProperties": false
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restricted": "{{message}}"
      }
    }
  },
  "no-restricted-class": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow specific classes in Vue components",
        "url": "https://eslint.vuejs.org/rules/no-restricted-class.html"
      },
      "fixable": null,
      "messages": {
        "forbiddenClass": "'{{class}}' class is not allowed."
      },
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        }
      }
    }
  },
  "no-restricted-component-options": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specific component option",
        "url": "https://eslint.vuejs.org/rules/no-restricted-component-options.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": ["name"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedOption": "{{message}}"
      }
    }
  },
  "no-restricted-custom-event": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "disallow specific custom event",
        "url": "https://eslint.vuejs.org/rules/no-restricted-custom-event.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": ["string"]
            },
            {
              "type": "object",
              "properties": {
                "event": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                },
                "suggest": {
                  "type": "string"
                }
              },
              "required": ["event"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedEvent": "{{message}}",
        "instead": "Instead, change to `{{suggest}}`."
      }
    }
  },
  "no-restricted-html-elements": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specific HTML elements",
        "url": "https://eslint.vuejs.org/rules/no-restricted-html-elements.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "element": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": ["element"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      }
    }
  },
  "no-restricted-props": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "disallow specific props",
        "url": "https://eslint.vuejs.org/rules/no-restricted-props.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": ["string"]
            },
            {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                },
                "suggest": {
                  "type": "string"
                }
              },
              "required": ["name"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedProp": "{{message}}",
        "instead": "Instead, change to `{{suggest}}`."
      }
    }
  },
  "no-restricted-static-attribute": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specific attribute",
        "url": "https://eslint.vuejs.org/rules/no-restricted-static-attribute.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "key": {
                  "type": "string"
                },
                "value": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "enum": [true]
                    }
                  ]
                },
                "element": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": ["key"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedAttr": "{{message}}"
      }
    }
  },
  "no-restricted-syntax": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified syntax in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/no-restricted-syntax.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-restricted-syntax"
      },
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "string"
            },
            {
              "type": "object",
              "properties": {
                "selector": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "required": ["selector"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedSyntax": "{{message}}"
      }
    }
  },
  "no-restricted-v-bind": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow specific argument in `v-bind`",
        "url": "https://eslint.vuejs.org/rules/no-restricted-v-bind.html"
      },
      "fixable": null,
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": ["string", "null"]
            },
            {
              "type": "object",
              "properties": {
                "argument": {
                  "type": ["string", "null"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["prop", "camel", "sync", "attr"]
                  },
                  "uniqueItems": true
                },
                "element": {
                  "type": "string"
                },
                "message": {
                  "type": "string",
                  "minLength": 1
                }
              },
              "required": ["argument"],
              "additionalProperties": false
            }
          ]
        },
        "uniqueItems": true,
        "minItems": 0
      },
      "messages": {
        "restrictedVBind": "{{message}}"
      }
    }
  },
  "no-setup-props-destructure": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow destructuring of `props` passed to `setup`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-setup-props-destructure.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "destructuring": "Destructuring the `props` will cause the value to lose reactivity.",
        "getProperty": "Getting a value from the `props` in root scope of `{{scopeName}}` will cause the value to lose reactivity."
      }
    }
  },
  "no-shared-component-data": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce component's data property to be a function",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-shared-component-data.html"
      },
      "fixable": "code",
      "schema": []
    }
  },
  "no-side-effects-in-computed-properties": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow side effects in computed properties",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-side-effects-in-computed-properties.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-spaces-around-equal-signs-in-attribute": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "disallow spaces around equal signs in attribute",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/no-spaces-around-equal-signs-in-attribute.html"
      },
      "fixable": "whitespace",
      "schema": []
    }
  },
  "no-sparse-arrays": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow sparse arrays in `<template>`",
        "recommended": true,
        "url": "https://eslint.vuejs.org/rules/no-sparse-arrays.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-sparse-arrays"
      },
      "schema": [],
      "messages": {
        "unexpectedSparseArray": "Unexpected comma in middle of array."
      }
    }
  },
  "no-static-inline-styles": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow static inline `style` attributes",
        "url": "https://eslint.vuejs.org/rules/no-static-inline-styles.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowBinding": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "forbiddenStaticInlineStyle": "Static inline `style` are forbidden.",
        "forbiddenStyleAttr": "`style` attributes are forbidden."
      }
    }
  },
  "no-template-key": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow `key` attribute on `<template>`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-template-key.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "disallow": "'<template>' cannot be keyed. Place the key on real elements instead."
      }
    }
  },
  "no-template-shadow": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow variable declarations from shadowing variables declared in the outer scope",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/no-template-shadow.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-template-target-blank": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow target=\"_blank\" attribute without rel=\"noopener noreferrer\"",
        "url": "https://eslint.vuejs.org/rules/no-template-target-blank.html"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowReferrer": {
              "type": "boolean"
            },
            "enforceDynamicLinks": {
              "enum": ["always", "never"]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-textarea-mustache": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow mustaches in `<textarea>`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-textarea-mustache.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-this-in-before-route-enter": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow `this` usage in a `beforeRouteEnter` method",
        "categories": null,
        "url": "https://eslint.vuejs.org/rules/no-this-in-before-route-enter.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "disallow": "'beforeRouteEnter' does NOT have access to `this` component instance. https://router.vuejs.org/guide/advanced/navigation-guards.html#in-component-guards."
      }
    }
  },
  "no-undef-components": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use of undefined components in `<template>`",
        "url": "https://eslint.vuejs.org/rules/no-undef-components.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignorePatterns": {
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "undef": "The '<{{name}}>' component has been used, but not defined.",
        "typeOnly": "The '<{{name}}>' component has been used, but '{{name}}' only refers to a type."
      }
    }
  },
  "no-undef-properties": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow undefined properties",
        "url": "https://eslint.vuejs.org/rules/no-undef-properties.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignores": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "undef": "'{{name}}' is not defined.",
        "undefProps": "'{{name}}' is not defined in props."
      }
    }
  },
  "no-unsupported-features": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow unsupported Vue.js syntax on the specified version",
        "url": "https://eslint.vuejs.org/rules/no-unsupported-features.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "version": {
              "type": "string"
            },
            "ignores": {
              "type": "array",
              "items": {
                "enum": [
                  "slot-scope-attribute",
                  "dynamic-directive-arguments",
                  "v-slot",
                  "script-setup",
                  "style-css-vars-injection",
                  "v-model-argument",
                  "v-model-custom-modifiers",
                  "v-is",
                  "is-attribute-with-vue-prefix",
                  "v-memo",
                  "v-bind-prop-modifier-shorthand",
                  "v-bind-attr-modifier"
                ]
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "forbiddenSlotScopeAttribute": "`slot-scope` are not supported except Vue.js \">=2.5.0 <3.0.0\".",
        "forbiddenDynamicDirectiveArguments": "Dynamic arguments are not supported until Vue.js \"2.6.0\".",
        "forbiddenVSlot": "`v-slot` are not supported until Vue.js \"2.6.0\".",
        "forbiddenScriptSetup": "`<script setup>` is not supported until Vue.js \"2.7.0\".",
        "forbiddenStyleCssVarsInjection": "SFC CSS variable injection is not supported until Vue.js \">=3.0.3 || >=2.7.0 <3.0.0\".",
        "forbiddenVModelArgument": "Argument on `v-model` is not supported until Vue.js \"3.0.0\".",
        "forbiddenVModelCustomModifiers": "Custom modifiers on `v-model` are not supported until Vue.js \"3.0.0\".",
        "forbiddenVIs": "`v-is` are not supported until Vue.js \"3.0.0\".",
        "forbiddenIsAttributeWithVuePrefix": "`is=\"vue:\"` are not supported until Vue.js \"3.1.0\".",
        "forbiddenVMemo": "`v-memo` are not supported until Vue.js \"3.2.0\".",
        "forbiddenVBindPropModifierShorthand": "`.prop` shorthand are not supported until Vue.js \"3.2.0\".",
        "forbiddenVBindAttrModifier": "`.attr` modifiers on `v-bind` are not supported until Vue.js \"3.2.0\"."
      }
    }
  },
  "no-unused-components": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow registering components that are not used inside templates",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-unused-components.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreWhenBindingPresent": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-unused-properties": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow unused properties",
        "url": "https://eslint.vuejs.org/rules/no-unused-properties.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "groups": {
              "type": "array",
              "items": {
                "enum": [
                  "props",
                  "data",
                  "asyncData",
                  "computed",
                  "methods",
                  "setup"
                ]
              },
              "additionalItems": false,
              "uniqueItems": true
            },
            "deepData": {
              "type": "boolean"
            },
            "ignorePublicMembers": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unused": "'{{name}}' of {{group}} found, but never used."
      }
    }
  },
  "no-unused-refs": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow unused refs",
        "url": "https://eslint.vuejs.org/rules/no-unused-refs.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unused": "'{{name}}' is defined as ref, but never used."
      }
    }
  },
  "no-unused-vars": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "disallow unused variable definitions of v-for directives or scope attributes",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-unused-vars.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignorePattern": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-use-computed-property-like-method": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow use computed property like method",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-use-computed-property-like-method.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "Use {{ likeProperty }} instead of {{ likeMethod }}."
      }
    }
  },
  "no-use-v-if-with-v-for": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use v-if on the same element as v-for",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-use-v-if-with-v-for.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowUsingIterationVar": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-useless-concat": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary concatenation of literals or template literals in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/no-useless-concat.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/no-useless-concat"
      },
      "schema": [],
      "messages": {
        "unexpectedConcat": "Unexpected string concatenation of literals."
      }
    }
  },
  "no-useless-mustaches": {
    "meta": {
      "docs": {
        "description": "disallow unnecessary mustache interpolations",
        "url": "https://eslint.vuejs.org/rules/no-useless-mustaches.html"
      },
      "fixable": "code",
      "messages": {
        "unexpected": "Unexpected mustache interpolation with a string literal value."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreIncludesComment": {
              "type": "boolean"
            },
            "ignoreStringEscape": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "suggestion"
    }
  },
  "no-useless-template-attributes": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow useless attribute on `<template>`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/no-useless-template-attributes.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedAttr": "Unexpected useless attribute on `<template>`.",
        "unexpectedDir": "Unexpected useless directive on `<template>`."
      }
    }
  },
  "no-useless-v-bind": {
    "meta": {
      "docs": {
        "description": "disallow unnecessary `v-bind` directives",
        "url": "https://eslint.vuejs.org/rules/no-useless-v-bind.html"
      },
      "fixable": "code",
      "messages": {
        "unexpected": "Unexpected `v-bind` with a string literal value."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreIncludesComment": {
              "type": "boolean"
            },
            "ignoreStringEscape": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "suggestion"
    }
  },
  "no-v-for-template-key-on-child": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow key of `<template v-for>` placed on child elements",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-v-for-template-key-on-child.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "vForTemplateKeyPlacement": "`<template v-for>` key should be placed on the `<template>` tag."
      }
    }
  },
  "no-v-for-template-key": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow `key` attribute on `<template v-for>`",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/no-v-for-template-key.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "disallow": "'<template v-for>' cannot be keyed. Place the key on real elements instead."
      }
    }
  },
  "no-v-html": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use of v-html to prevent XSS attack",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/no-v-html.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-v-model-argument": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow adding an argument to `v-model` used in custom component",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/no-v-model-argument.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "vModelRequireNoArgument": "'v-model' directives require no argument."
      }
    }
  },
  "no-v-text-v-html-on-component": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "disallow v-text / v-html on component",
        "categories": ["essential", "vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-v-text-v-html-on-component.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "disallow": "Using {{directiveName}} on component may break component's content."
      }
    }
  },
  "no-v-text": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow use of v-text",
        "url": "https://eslint.vuejs.org/rules/no-v-text.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "no-watch-after-await": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow asynchronously registered `watch`",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/no-watch-after-await.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "forbidden": "`watch` is forbidden after an `await` expression."
      }
    }
  },
  "object-curly-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent line breaks after opening and before closing braces in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/object-curly-newline.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/object-curly-newline"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "oneOf": [
                {
                  "enum": ["always", "never"]
                },
                {
                  "type": "object",
                  "properties": {
                    "multiline": {
                      "type": "boolean"
                    },
                    "minProperties": {
                      "type": "integer",
                      "minimum": 0
                    },
                    "consistent": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false,
                  "minProperties": 1
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "ObjectExpression": {
                  "oneOf": [
                    {
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minProperties": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "consistent": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                "ObjectPattern": {
                  "oneOf": [
                    {
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minProperties": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "consistent": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                "ImportDeclaration": {
                  "oneOf": [
                    {
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minProperties": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "consistent": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                },
                "ExportDeclaration": {
                  "oneOf": [
                    {
                      "enum": ["always", "never"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "multiline": {
                          "type": "boolean"
                        },
                        "minProperties": {
                          "type": "integer",
                          "minimum": 0
                        },
                        "consistent": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false,
                      "minProperties": 1
                    }
                  ]
                }
              },
              "additionalProperties": false,
              "minProperties": 1
            }
          ]
        }
      ],
      "messages": {
        "unexpectedLinebreakBeforeClosingBrace": "Unexpected line break before this closing brace.",
        "unexpectedLinebreakAfterOpeningBrace": "Unexpected line break after this opening brace.",
        "expectedLinebreakBeforeClosingBrace": "Expected a line break before this closing brace.",
        "expectedLinebreakAfterOpeningBrace": "Expected a line break after this opening brace."
      }
    }
  },
  "object-curly-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/object-curly-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "arraysInObjects": {
              "type": "boolean"
            },
            "objectsInObjects": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "requireSpaceBefore": "A space is required before '{{token}}'.",
        "requireSpaceAfter": "A space is required after '{{token}}'.",
        "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
        "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
      }
    }
  },
  "object-property-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce placing object properties on separate lines in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/object-property-newline.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/object-property-newline"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowAllPropertiesOnSameLine": {
              "type": "boolean",
              "default": false
            },
            "allowMultiplePropertiesPerLine": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "whitespace",
      "messages": {
        "propertiesOnNewlineAll": "Object properties must go on a new line if they aren't all on the same line.",
        "propertiesOnNewline": "Object properties must go on a new line."
      }
    }
  },
  "object-shorthand": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow method and property shorthand syntax for object literals in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/object-shorthand.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/object-shorthand"
      },
      "fixable": "code",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": [
                  "always",
                  "methods",
                  "properties",
                  "never",
                  "consistent",
                  "consistent-as-needed"
                ]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["always", "methods", "properties"]
              },
              {
                "type": "object",
                "properties": {
                  "avoidQuotes": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["always", "methods"]
              },
              {
                "type": "object",
                "properties": {
                  "ignoreConstructors": {
                    "type": "boolean"
                  },
                  "methodsIgnorePattern": {
                    "type": "string"
                  },
                  "avoidQuotes": {
                    "type": "boolean"
                  },
                  "avoidExplicitReturnArrows": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "expectedAllPropertiesShorthanded": "Expected shorthand for all properties.",
        "expectedLiteralMethodLongform": "Expected longform method syntax for string literal keys.",
        "expectedPropertyShorthand": "Expected property shorthand.",
        "expectedPropertyLongform": "Expected longform property syntax.",
        "expectedMethodShorthand": "Expected method shorthand.",
        "expectedMethodLongform": "Expected longform method syntax.",
        "unexpectedMix": "Unexpected mix of shorthand and non-shorthand properties."
      }
    }
  },
  "one-component-per-file": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce that each component should be in its own file",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/one-component-per-file.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "toManyComponents": "There is more than one component in this file."
      }
    }
  },
  "operator-linebreak": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent linebreak style for operators in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/operator-linebreak.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/operator-linebreak"
      },
      "schema": [
        {
          "enum": ["after", "before", "none", null]
        },
        {
          "type": "object",
          "properties": {
            "overrides": {
              "type": "object",
              "additionalProperties": {
                "enum": ["after", "before", "none", "ignore"]
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code",
      "messages": {
        "operatorAtBeginning": "'{{operator}}' should be placed at the beginning of the line.",
        "operatorAtEnd": "'{{operator}}' should be placed at the end of the line.",
        "badLinebreak": "Bad line breaking before and after '{{operator}}'.",
        "noLinebreak": "There should be no line break before or after '{{operator}}'."
      }
    }
  },
  "order-in-components": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce order of properties in components",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/order-in-components.html"
      },
      "fixable": "code",
      "schema": [
        {
          "type": "object",
          "properties": {
            "order": {
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "padding-line-between-blocks": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require or disallow padding lines between blocks",
        "url": "https://eslint.vuejs.org/rules/padding-line-between-blocks.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["never", "always"]
        }
      ],
      "messages": {
        "never": "Unexpected blank line before this block.",
        "always": "Expected blank line before this block."
      }
    }
  },
  "padding-line-between-tags": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require or disallow newlines between sibling tags in template",
        "url": "https://eslint.vuejs.org/rules/padding-line-between-tags.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "blankLine": {
                "enum": ["always", "never", "consistent"]
              },
              "prev": {
                "type": "string"
              },
              "next": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": ["blankLine", "prev", "next"]
          }
        }
      ],
      "messages": {
        "never": "Unexpected blank line before this tag.",
        "always": "Expected blank line before this tag."
      }
    }
  },
  "padding-lines-in-component-definition": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require or disallow padding lines in component definition",
        "url": "https://eslint.vuejs.org/rules/padding-lines-in-component-definition.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["always", "never"]
            },
            {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "betweenOptions": {
                  "enum": ["never", "always", "ignore"]
                },
                "withinOption": {
                  "oneOf": [
                    {
                      "enum": ["never", "always", "ignore"]
                    },
                    {
                      "type": "object",
                      "patternProperties": {
                        "^[a-zA-Z]*$": {
                          "oneOf": [
                            {
                              "enum": ["never", "always", "ignore"]
                            },
                            {
                              "type": "object",
                              "properties": {
                                "betweenItems": {
                                  "enum": ["never", "always", "ignore"]
                                },
                                "withinEach": {
                                  "enum": ["never", "always", "ignore"]
                                }
                              },
                              "additionalProperties": false
                            }
                          ]
                        }
                      },
                      "minProperties": 1,
                      "additionalProperties": false
                    }
                  ]
                },
                "groupSingleLineProperties": {
                  "type": "boolean"
                }
              }
            }
          ]
        }
      ],
      "messages": {
        "never": "Unexpected blank line before this definition.",
        "always": "Expected blank line before this definition.",
        "groupSingleLineProperties": "Unexpected blank line between single line properties."
      }
    }
  },
  "prefer-import-from-vue": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce import from 'vue' instead of import from '@vue/*'",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/prefer-import-from-vue.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "importedAtVue": "Import from 'vue' instead of '{{source}}'."
      }
    }
  },
  "prefer-prop-type-boolean-first": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce `Boolean` comes first in component prop types",
        "url": "https://eslint.vuejs.org/rules/prefer-prop-type-boolean-first.html"
      },
      "fixable": null,
      "hasSuggestions": true,
      "schema": [],
      "messages": {
        "shouldBeFirst": "Type `Boolean` should be at first in prop types.",
        "moveToFirst": "Move `Boolean` to be first in prop types."
      }
    }
  },
  "prefer-separate-static-class": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require static class names in template to be in a separate `class` attribute",
        "url": "https://eslint.vuejs.org/rules/prefer-separate-static-class.html"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "preferSeparateStaticClass": "Static class \"{{className}}\" should be in a static `class` attribute."
      }
    }
  },
  "prefer-template": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require template literals instead of string concatenation in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/prefer-template.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/prefer-template"
      },
      "schema": [],
      "fixable": "code",
      "messages": {
        "unexpectedStringConcatenation": "Unexpected string concatenation."
      }
    }
  },
  "prefer-true-attribute-shorthand": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require shorthand form attribute when `v-bind` value is `true`",
        "url": "https://eslint.vuejs.org/rules/prefer-true-attribute-shorthand.html"
      },
      "fixable": null,
      "hasSuggestions": true,
      "schema": [
        {
          "enum": ["always", "never"]
        }
      ],
      "messages": {
        "expectShort": "Boolean prop with 'true' value should be written in shorthand form.",
        "expectLong": "Boolean prop with 'true' value should be written in long form.",
        "rewriteIntoShort": "Rewrite this prop into shorthand form.",
        "rewriteIntoLongVueProp": "Rewrite this prop into long-form Vue component prop.",
        "rewriteIntoLongHtmlAttr": "Rewrite this prop into long-form HTML attribute."
      }
    }
  },
  "prop-name-casing": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce specific casing for the Prop name in Vue components",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/prop-name-casing.html"
      },
      "fixable": null,
      "schema": [
        {
          "enum": ["camelCase", "snake_case"]
        }
      ]
    }
  },
  "quote-props": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require quotes around object literal property names in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/quote-props.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/quote-props"
      },
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed"
                ]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": [
                  "always",
                  "as-needed",
                  "consistent",
                  "consistent-as-needed"
                ]
              },
              {
                "type": "object",
                "properties": {
                  "keywords": {
                    "type": "boolean"
                  },
                  "unnecessary": {
                    "type": "boolean"
                  },
                  "numbers": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "fixable": "code",
      "messages": {
        "requireQuotesDueToReservedWord": "Properties should be quoted as '{{property}}' is a reserved word.",
        "inconsistentlyQuotedProperty": "Inconsistently quoted property '{{key}}' found.",
        "unnecessarilyQuotedProperty": "Unnecessarily quoted property '{{property}}' found.",
        "unquotedReservedProperty": "Unquoted reserved word '{{property}}' used as key.",
        "unquotedNumericProperty": "Unquoted number literal '{{property}}' used as key.",
        "unquotedPropertyFound": "Unquoted property '{{property}}' found.",
        "redundantQuoting": "Properties shouldn't be quoted as all quotes are redundant."
      }
    }
  },
  "require-component-is": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require `v-bind:is` of `<component>` elements",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/require-component-is.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "require-default-prop": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require default value for props",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/require-default-prop.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "missingDefault": "Prop '{{propName}}' requires default value to be set."
      }
    }
  },
  "require-direct-export": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require the component to be directly exported",
        "url": "https://eslint.vuejs.org/rules/require-direct-export.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "disallowFunctionalComponentFunction": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "require-emit-validator": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "require type definitions in emits",
        "url": "https://eslint.vuejs.org/rules/require-emit-validator.html"
      },
      "fixable": null,
      "messages": {
        "missing": "Emit \"{{name}}\" should define at least its validator function.",
        "skipped": "Emit \"{{name}}\" should not skip validation, or you may define a validator function with no parameters.",
        "emptyValidation": "Replace with a validator function with no parameters."
      },
      "schema": []
    }
  },
  "require-explicit-emits": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "require `emits` option with name triggered by `$emit()`",
        "categories": ["vue3-strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/require-explicit-emits.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowProps": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missing": "The \"{{name}}\" event has been triggered but not declared on {{emitsKind}}.",
        "addOneOption": "Add the \"{{name}}\" to {{emitsKind}}.",
        "addArrayEmitsOption": "Add the {{emitsKind}} with array syntax and define \"{{name}}\" event.",
        "addObjectEmitsOption": "Add the {{emitsKind}} with object syntax and define \"{{name}}\" event."
      }
    }
  },
  "require-expose": {
    "meta": {
      "hasSuggestions": true,
      "type": "suggestion",
      "docs": {
        "description": "require declare public properties using `expose`",
        "url": "https://eslint.vuejs.org/rules/require-expose.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "requireExpose": "The public properties of the component must be explicitly declared using `expose`. If the component does not have public properties, declare it empty.",
        "addExposeOptionForEmpty": "Add the `expose` option to give an empty array.",
        "addExposeOptionForAll": "Add the `expose` option to declare all properties."
      }
    }
  },
  "require-name-property": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require a name property in Vue components",
        "url": "https://eslint.vuejs.org/rules/require-name-property.html"
      },
      "fixable": null,
      "hasSuggestions": true,
      "schema": []
    }
  },
  "require-prop-comment": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require props to have a comment",
        "url": "https://eslint.vuejs.org/rules/require-prop-comment.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "type": {
              "enum": ["JSDoc", "line", "block", "any"]
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "requireAnyComment": "The \"{{name}}\" property should have a comment.",
        "requireLineComment": "The \"{{name}}\" property should have a line comment.",
        "requireBlockComment": "The \"{{name}}\" property should have a block comment.",
        "requireJSDocComment": "The \"{{name}}\" property should have a JSDoc comment."
      }
    }
  },
  "require-prop-type-constructor": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require prop type to be a constructor",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/require-prop-type-constructor.html"
      },
      "fixable": "code",
      "schema": []
    }
  },
  "require-prop-types": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "require type definitions in props",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/require-prop-types.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "require-render-return": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce render function to always return value",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/require-render-return.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "require-slots-as-functions": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce properties of `$slots` to be used as a function",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/require-slots-as-functions.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpected": "Property in `$slots` should be used as function."
      }
    }
  },
  "require-toggle-inside-transition": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require control the display of the content inside `<transition>`",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/require-toggle-inside-transition.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "expected": "The element inside `<transition>` is expected to have a `v-if` or `v-show` directive."
      }
    }
  },
  "require-v-for-key": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require `v-bind:key` with `v-for` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/require-v-for-key.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "require-valid-default-prop": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce props default values to be valid",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/require-valid-default-prop.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "return-in-computed-property": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce that a return statement is present in computed property",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/return-in-computed-property.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "treatUndefinedAsUnspecified": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "return-in-emits-validator": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce that a return statement is present in emits validator",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/return-in-emits-validator.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "script-indent": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce consistent indentation in `<script>`",
        "url": "https://eslint.vuejs.org/rules/script-indent.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "type": "integer",
              "minimum": 1
            },
            {
              "enum": ["tab"]
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "baseIndent": {
              "type": "integer",
              "minimum": 0
            },
            "switchCase": {
              "type": "integer",
              "minimum": 0
            },
            "ignores": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": ":exit$"
                    }
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": "^\\s*$"
                    }
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "script-setup-uses-vars": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "prevent `<script setup>` variables used in `<template>` to be marked as unused",
        "url": "https://eslint.vuejs.org/rules/script-setup-uses-vars.html"
      },
      "deprecated": true,
      "schema": []
    }
  },
  "singleline-html-element-content-newline": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "require a line break before and after the contents of a singleline element",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/singleline-html-element-content-newline.html"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreWhenNoAttributes": {
              "type": "boolean"
            },
            "ignoreWhenEmpty": {
              "type": "boolean"
            },
            "ignores": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedAfterClosingBracket": "Expected 1 line break after opening tag (`<{{name}}>`), but no line breaks found.",
        "unexpectedBeforeOpeningBracket": "Expected 1 line break before closing tag (`</{{name}}>`), but no line breaks found."
      }
    }
  },
  "sort-keys": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce sort-keys in a manner that is compatible with order-in-components",
        "categories": null,
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/sort-keys.html"
      },
      "fixable": null,
      "schema": [
        {
          "enum": ["asc", "desc"]
        },
        {
          "type": "object",
          "properties": {
            "caseSensitive": {
              "type": "boolean",
              "default": true
            },
            "ignoreChildrenOf": {
              "type": "array"
            },
            "ignoreGrandchildrenOf": {
              "type": "array"
            },
            "minKeys": {
              "type": "integer",
              "minimum": 2,
              "default": 2
            },
            "natural": {
              "type": "boolean",
              "default": false
            },
            "runOutsideVue": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "sortKeys": "Expected object keys to be in {{natural}}{{insensitive}}{{order}}ending order. '{{thisName}}' should be before '{{prevName}}'."
      }
    }
  },
  "space-in-parens": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside parentheses in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/space-in-parens.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/space-in-parens"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "exceptions": {
              "type": "array",
              "items": {
                "enum": ["{}", "[]", "()", "empty"]
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missingOpeningSpace": "There must be a space after this paren.",
        "missingClosingSpace": "There must be a space before this paren.",
        "rejectedOpeningSpace": "There should be no space after this paren.",
        "rejectedClosingSpace": "There should be no space before this paren."
      }
    }
  },
  "space-infix-ops": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/space-infix-ops.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "int32Hint": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missingSpace": "Operator '{{operator}}' must be spaced."
      }
    }
  },
  "space-unary-ops": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before or after unary operators in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/space-unary-ops.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/space-unary-ops"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "words": {
              "type": "boolean",
              "default": true
            },
            "nonwords": {
              "type": "boolean",
              "default": false
            },
            "overrides": {
              "type": "object",
              "additionalProperties": {
                "type": "boolean"
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpectedBefore": "Unexpected space before unary operator '{{operator}}'.",
        "unexpectedAfter": "Unexpected space after unary operator '{{operator}}'.",
        "unexpectedAfterWord": "Unexpected space after unary word operator '{{word}}'.",
        "wordOperator": "Unary word operator '{{word}}' must be followed by whitespace.",
        "operator": "Unary operator '{{operator}}' must be followed by whitespace.",
        "beforeUnaryExpressions": "Space is required before unary expressions '{{token}}'."
      }
    }
  },
  "static-class-names-order": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "url": "https://eslint.vuejs.org/rules/static-class-names-order.html",
        "description": "enforce static class names order"
      },
      "fixable": "code",
      "schema": []
    }
  },
  "template-curly-spacing": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing around embedded expressions of template strings in `<template>`",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/template-curly-spacing.html",
        "category": null,
        "extensionRule": true,
        "coreRuleUrl": "https://eslint.org/docs/rules/template-curly-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        }
      ],
      "messages": {
        "expectedBefore": "Expected space(s) before '}'.",
        "expectedAfter": "Expected space(s) after '${'.",
        "unexpectedBefore": "Unexpected space(s) before '}'.",
        "unexpectedAfter": "Unexpected space(s) after '${'."
      }
    }
  },
  "this-in-template": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "disallow usage of `this` in template",
        "categories": ["vue3-recommended", "recommended"],
        "url": "https://eslint.vuejs.org/rules/this-in-template.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["always", "never"]
        }
      ]
    }
  },
  "use-v-on-exact": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce usage of `exact` modifier on `v-on`",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/use-v-on-exact.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "v-bind-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce `v-bind` directive style",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/v-bind-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["shorthand", "longform"]
        }
      ]
    }
  },
  "v-for-delimiter-style": {
    "meta": {
      "type": "layout",
      "docs": {
        "description": "enforce `v-for` directive's delimiter style",
        "recommended": false,
        "url": "https://eslint.vuejs.org/rules/v-for-delimiter-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["in", "of"]
        }
      ]
    }
  },
  "v-on-event-hyphenation": {
    "meta": {
      "docs": {
        "description": "enforce v-on event naming style on custom components in template",
        "categories": ["vue3-strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/v-on-event-hyphenation.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "autofix": {
              "type": "boolean"
            },
            "ignore": {
              "type": "array",
              "items": {
                "allOf": [
                  {
                    "type": "string"
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": ":exit$"
                    }
                  },
                  {
                    "not": {
                      "type": "string",
                      "pattern": "^\\s*$"
                    }
                  }
                ]
              },
              "uniqueItems": true,
              "additionalItems": false
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "suggestion"
    }
  },
  "v-on-function-call": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce or forbid parentheses after method calls without arguments in `v-on` directives",
        "url": "https://eslint.vuejs.org/rules/v-on-function-call.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "ignoreIncludesComment": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "deprecated": true,
      "replacedBy": ["v-on-handler-style"]
    }
  },
  "v-on-handler-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce writing style for handlers in `v-on` directives",
        "url": "https://eslint.vuejs.org/rules/v-on-handler-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["inline", "inline-function"]
            },
            {
              "type": "array",
              "items": [
                {
                  "const": "method"
                },
                {
                  "enum": ["inline", "inline-function"]
                }
              ],
              "uniqueItems": true,
              "additionalItems": false,
              "minItems": 2,
              "maxItems": 2
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "ignoreIncludesComment": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "preferMethodOverInline": "Prefer method handler over inline handler in v-on.",
        "preferMethodOverInlineWithoutIdCall": "Prefer method handler over inline handler in v-on. Note that you may need to create a new method.",
        "preferMethodOverInlineFunction": "Prefer method handler over inline function in v-on.",
        "preferMethodOverInlineFunctionWithoutIdCall": "Prefer method handler over inline function in v-on. Note that you may need to create a new method.",
        "preferInlineOverMethod": "Prefer inline handler over method handler in v-on.",
        "preferInlineOverInlineFunction": "Prefer inline handler over inline function in v-on.",
        "preferInlineOverInlineFunctionWithMultipleParams": "Prefer inline handler over inline function in v-on. Note that the custom event must be changed to a single payload.",
        "preferInlineFunctionOverMethod": "Prefer inline function over method handler in v-on.",
        "preferInlineFunctionOverInline": "Prefer inline function over inline handler in v-on."
      }
    }
  },
  "v-on-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce `v-on` directive style",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/v-on-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["shorthand", "longform"]
        }
      ]
    }
  },
  "v-slot-style": {
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "enforce `v-slot` directive style",
        "categories": ["vue3-strongly-recommended", "strongly-recommended"],
        "url": "https://eslint.vuejs.org/rules/v-slot-style.html"
      },
      "fixable": "code",
      "schema": [
        {
          "anyOf": [
            {
              "enum": ["shorthand", "longform"]
            },
            {
              "type": "object",
              "properties": {
                "atComponent": {
                  "enum": ["shorthand", "longform", "v-slot"]
                },
                "default": {
                  "enum": ["shorthand", "longform", "v-slot"]
                },
                "named": {
                  "enum": ["shorthand", "longform"]
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "expectedShorthand": "Expected '#{{argument}}' instead of '{{actual}}'.",
        "expectedLongform": "Expected 'v-slot:{{argument}}' instead of '{{actual}}'.",
        "expectedVSlot": "Expected 'v-slot' instead of '{{actual}}'."
      }
    }
  },
  "valid-attribute-name": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require valid attribute names",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-attribute-name.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "attribute": "Attribute name {{name}} is not valid."
      }
    }
  },
  "valid-define-emits": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `defineEmits` compiler macro",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-define-emits.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "hasTypeAndArg": "`defineEmits` has both a type-only emit and an argument.",
        "referencingLocally": "`defineEmits` are referencing locally declared variables.",
        "multiple": "`defineEmits` has been called multiple times.",
        "notDefined": "Custom events are not defined.",
        "definedInBoth": "Custom events are defined in both `defineEmits` and `export default {}`."
      }
    }
  },
  "valid-define-props": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `defineProps` compiler macro",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-define-props.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "hasTypeAndArg": "`defineProps` has both a type-only props and an argument.",
        "referencingLocally": "`defineProps` are referencing locally declared variables.",
        "multiple": "`defineProps` has been called multiple times.",
        "notDefined": "Props are not defined.",
        "definedInBoth": "Props are defined in both `defineProps` and `export default {}`."
      }
    }
  },
  "valid-model-definition": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "require valid keys in model option",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/valid-model-definition.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "valid-next-tick": {
    "meta": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "enforce valid `nextTick` function calls",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-next-tick.html"
      },
      "fixable": "code",
      "schema": []
    }
  },
  "valid-template-root": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid template root",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-template-root.html"
      },
      "fixable": null,
      "schema": []
    }
  },
  "valid-v-bind-sync": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `.sync` modifier on `v-bind` directives",
        "categories": ["essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-bind-sync.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedInvalidElement": "'.sync' modifiers aren't supported on <{{name}}> non Vue-components.",
        "unexpectedOptionalChaining": "Optional chaining cannot appear in 'v-bind' with '.sync' modifiers.",
        "unexpectedNonLhsExpression": "'.sync' modifiers require the attribute value which is valid as LHS.",
        "unexpectedNullObject": "'.sync' modifier has potential null object property access.",
        "unexpectedUpdateIterationVariable": "'.sync' modifiers cannot update the iteration variable '{{varName}}' itself."
      }
    }
  },
  "valid-v-bind": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-bind` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-bind.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unsupportedModifier": "'v-bind' directives don't support the modifier '{{name}}'.",
        "expectedValue": "'v-bind' directives require an attribute value."
      }
    }
  },
  "valid-v-cloak": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-cloak` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-cloak.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-cloak' directives require no argument.",
        "unexpectedModifier": "'v-cloak' directives require no modifier.",
        "unexpectedValue": "'v-cloak' directives require no attribute value."
      }
    }
  },
  "valid-v-else-if": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-else-if` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-else-if.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "missingVIf": "'v-else-if' directives require being preceded by the element which has a 'v-if' or 'v-else-if' directive.",
        "withVIf": "'v-else-if' and 'v-if' directives can't exist on the same element.",
        "withVElse": "'v-else-if' and 'v-else' directives can't exist on the same element.",
        "unexpectedArgument": "'v-else-if' directives require no argument.",
        "unexpectedModifier": "'v-else-if' directives require no modifier.",
        "expectedValue": "'v-else-if' directives require that attribute value."
      }
    }
  },
  "valid-v-else": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-else` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-else.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "missingVIf": "'v-else' directives require being preceded by the element which has a 'v-if' or 'v-else-if' directive.",
        "withVIf": "'v-else' and 'v-if' directives can't exist on the same element. You may want 'v-else-if' directives.",
        "withVElseIf": "'v-else' and 'v-else-if' directives can't exist on the same element.",
        "unexpectedArgument": "'v-else' directives require no argument.",
        "unexpectedModifier": "'v-else' directives require no modifier.",
        "unexpectedValue": "'v-else' directives require no attribute value."
      }
    }
  },
  "valid-v-for": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-for` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-for.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "requireKey": "Custom elements in iteration require 'v-bind:key' directives.",
        "keyUseFVorVars": "Expected 'v-bind:key' directive to use the variables which are defined by the 'v-for' directive.",
        "unexpectedArgument": "'v-for' directives require no argument.",
        "unexpectedModifier": "'v-for' directives require no modifier.",
        "expectedValue": "'v-for' directives require that attribute value.",
        "unexpectedExpression": "'v-for' directives require the special syntax '<alias> in <expression>'.",
        "invalidEmptyAlias": "Invalid alias ''.",
        "invalidAlias": "Invalid alias '{{text}}'."
      }
    }
  },
  "valid-v-html": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-html` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-html.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-html' directives require no argument.",
        "unexpectedModifier": "'v-html' directives require no modifier.",
        "expectedValue": "'v-html' directives require that attribute value."
      }
    }
  },
  "valid-v-if": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-if` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-if.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "withVElse": "'v-if' and 'v-else' directives can't exist on the same element. You may want 'v-else-if' directives.",
        "withVElseIf": "'v-if' and 'v-else-if' directives can't exist on the same element.",
        "unexpectedArgument": "'v-if' directives require no argument.",
        "unexpectedModifier": "'v-if' directives require no modifier.",
        "expectedValue": "'v-if' directives require that attribute value."
      }
    }
  },
  "valid-v-is": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-is` directives",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-is.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-is' directives require no argument.",
        "unexpectedModifier": "'v-is' directives require no modifier.",
        "expectedValue": "'v-is' directives require that attribute value.",
        "ownerMustBeHTMLElement": "'v-is' directive must be owned by a native HTML element, but '{{name}}' is not."
      }
    }
  },
  "valid-v-memo": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-memo` directives",
        "categories": ["vue3-essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-memo.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-memo' directives require no argument.",
        "unexpectedModifier": "'v-memo' directives require no modifier.",
        "expectedValue": "'v-memo' directives require that attribute value.",
        "expectedArray": "'v-memo' directives require the attribute value to be an array.",
        "insideVFor": "'v-memo' directive does not work inside 'v-for'."
      }
    }
  },
  "valid-v-model": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-model` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-model.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedInvalidElement": "'v-model' directives aren't supported on <{{name}}> elements.",
        "unexpectedInputFile": "'v-model' directives don't support 'file' input type.",
        "unexpectedArgument": "'v-model' directives require no argument.",
        "unexpectedModifier": "'v-model' directives don't support the modifier '{{name}}'.",
        "missingValue": "'v-model' directives require that attribute value.",
        "unexpectedOptionalChaining": "Optional chaining cannot appear in 'v-model' directives.",
        "unexpectedNonLhsExpression": "'v-model' directives require the attribute value which is valid as LHS.",
        "unexpectedNullObject": "'v-model' directive has potential null object property access.",
        "unexpectedUpdateIterationVariable": "'v-model' directives cannot update the iteration variable '{{varName}}' itself."
      }
    }
  },
  "valid-v-on": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-on` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-on.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "modifiers": {
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unsupportedModifier": "'v-on' directives don't support the modifier '{{modifier}}'.",
        "avoidKeyword": "Avoid using JavaScript keyword as \"v-on\" value: {{value}}.",
        "expectedValueOrVerb": "'v-on' directives require a value or verb modifier (like 'stop' or 'prevent')."
      }
    }
  },
  "valid-v-once": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-once` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-once.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-once' directives require no argument.",
        "unexpectedModifier": "'v-once' directives require no modifier.",
        "unexpectedValue": "'v-once' directives require no attribute value."
      }
    }
  },
  "valid-v-pre": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-pre` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-pre.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-pre' directives require no argument.",
        "unexpectedModifier": "'v-pre' directives require no modifier.",
        "unexpectedValue": "'v-pre' directives require no attribute value."
      }
    }
  },
  "valid-v-show": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-show` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-show.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-show' directives require no argument.",
        "unexpectedModifier": "'v-show' directives require no modifier.",
        "expectedValue": "'v-show' directives require that attribute value.",
        "unexpectedTemplate": "'v-show' directives cannot be put on <template> tags."
      }
    }
  },
  "valid-v-slot": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-slot` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-slot.html"
      },
      "fixable": null,
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowModifiers": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "ownerMustBeCustomElement": "'v-slot' directive must be owned by a custom element, but '{{name}}' is not.",
        "namedSlotMustBeOnTemplate": "Named slots must use '<template>' on a custom element.",
        "defaultSlotMustBeOnTemplate": "Default slot must use '<template>' on a custom element when there are other named slots.",
        "disallowDuplicateSlotsOnElement": "An element cannot have multiple 'v-slot' directives.",
        "disallowDuplicateSlotsOnChildren": "An element cannot have multiple '<template>' elements which are distributed to the same slot.",
        "disallowArgumentUseSlotParams": "Dynamic argument of 'v-slot' directive cannot use that slot parameter.",
        "disallowAnyModifier": "'v-slot' directive doesn't support any modifier.",
        "requireAttributeValue": "'v-slot' directive on a custom element requires that attribute value."
      }
    }
  },
  "valid-v-text": {
    "meta": {
      "type": "problem",
      "docs": {
        "description": "enforce valid `v-text` directives",
        "categories": ["vue3-essential", "essential"],
        "url": "https://eslint.vuejs.org/rules/valid-v-text.html"
      },
      "fixable": null,
      "schema": [],
      "messages": {
        "unexpectedArgument": "'v-text' directives require no argument.",
        "unexpectedModifier": "'v-text' directives require no modifier.",
        "expectedValue": "'v-text' directives require that attribute value."
      }
    }
  }
}
