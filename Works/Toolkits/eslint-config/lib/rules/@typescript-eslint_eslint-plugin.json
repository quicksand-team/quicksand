{
  "adjacent-overload-signatures": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require that function overload signatures be consecutive",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/adjacent-overload-signatures"
      },
      "schema": [],
      "messages": {
        "adjacentSignature": "All {{name}} signatures should be adjacent."
      }
    }
  },
  "array-type": {
    "defaultOptions": [
      {
        "default": "array"
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require consistently using either `T[]` or `Array<T>` for arrays",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/array-type"
      },
      "fixable": "code",
      "messages": {
        "errorStringGeneric": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden. Use '{{className}}<{{type}}>' instead.",
        "errorStringArray": "Array type using '{{className}}<{{type}}>' is forbidden. Use '{{readonlyPrefix}}{{type}}[]' instead.",
        "errorStringArraySimple": "Array type using '{{className}}<{{type}}>' is forbidden for simple types. Use '{{readonlyPrefix}}{{type}}[]' instead.",
        "errorStringGenericSimple": "Array type using '{{readonlyPrefix}}{{type}}[]' is forbidden for non-simple types. Use '{{className}}<{{type}}>' instead."
      },
      "schema": {
        "$defs": {
          "arrayOption": {
            "enum": ["array", "generic", "array-simple"]
          }
        },
        "prefixItems": [
          {
            "properties": {
              "default": {
                "$ref": "#/$defs/arrayOption",
                "description": "The array type expected for mutable cases..."
              },
              "readonly": {
                "$ref": "#/$defs/arrayOption",
                "description": "The array type expected for readonly cases. If omitted, the value for `default` will be used."
              }
            },
            "type": "object"
          }
        ],
        "type": "array"
      }
    }
  },
  "await-thenable": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow awaiting a value that is not a Thenable",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/await-thenable"
      },
      "messages": {
        "await": "Unexpected `await` of a non-Promise (non-\"Thenable\") value."
      },
      "schema": [],
      "type": "problem"
    }
  },
  "ban-ts-comment": {
    "defaultOptions": [
      {
        "ts-expect-error": "allow-with-description",
        "ts-ignore": true,
        "ts-nocheck": true,
        "ts-check": false,
        "minimumDescriptionLength": 3
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow `@ts-<directive>` comments or require descriptions after directives",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/ban-ts-comment"
      },
      "messages": {
        "tsDirectiveComment": "Do not use \"@ts-{{directive}}\" because it alters compilation errors.",
        "tsDirectiveCommentRequiresDescription": "Include a description after the \"@ts-{{directive}}\" directive to explain why the @ts-{{directive}} is necessary. The description must be {{minimumDescriptionLength}} characters or longer.",
        "tsDirectiveCommentDescriptionNotMatchPattern": "The description for the \"@ts-{{directive}}\" directive must match the {{format}} format."
      },
      "schema": {
        "$defs": {
          "directiveConfigSchema": {
            "oneOf": [
              {
                "type": "boolean",
                "default": true
              },
              {
                "enum": ["allow-with-description"]
              },
              {
                "type": "object",
                "properties": {
                  "descriptionFormat": {
                    "type": "string"
                  }
                }
              }
            ]
          }
        },
        "prefixItems": [
          {
            "properties": {
              "ts-expect-error": {
                "$ref": "#/$defs/directiveConfigSchema"
              },
              "ts-ignore": {
                "$ref": "#/$defs/directiveConfigSchema"
              },
              "ts-nocheck": {
                "$ref": "#/$defs/directiveConfigSchema"
              },
              "ts-check": {
                "$ref": "#/$defs/directiveConfigSchema"
              },
              "minimumDescriptionLength": {
                "type": "number",
                "default": 3
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "array"
      }
    }
  },
  "ban-tslint-comment": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `// tslint:<rule-flag>` comments",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/ban-tslint-comment"
      },
      "messages": {
        "commentDetected": "tslint comment detected: \"{{ text }}\""
      },
      "schema": [],
      "fixable": "code"
    }
  },
  "ban-types": {
    "defaultOptions": [{}],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain types",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/ban-types"
      },
      "fixable": "code",
      "messages": {
        "bannedTypeMessage": "Don't use `{{name}}` as a type.{{customMessage}}"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "types": {
              "type": "object",
              "additionalProperties": {
                "oneOf": [
                  {
                    "type": "null"
                  },
                  {
                    "type": "boolean"
                  },
                  {
                    "type": "string"
                  },
                  {
                    "type": "object",
                    "properties": {
                      "message": {
                        "type": "string"
                      },
                      "fixWith": {
                        "type": "string"
                      }
                    },
                    "additionalProperties": false
                  }
                ]
              }
            },
            "extendDefaults": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "brace-style": {
    "defaultOptions": ["1tbs"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent brace style for blocks",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/brace-style"
      },
      "messages": {
        "nextLineOpen": "Opening curly brace does not appear on the same line as controlling statement.",
        "sameLineOpen": "Opening curly brace appears on the same line as controlling statement.",
        "blockSameLine": "Statement inside of curly braces should be on next line.",
        "nextLineClose": "Closing curly brace does not appear on the same line as the subsequent block.",
        "singleLineClose": "Closing curly brace should be on the same line as opening curly brace or on the line after the previous block.",
        "sameLineClose": "Closing curly brace appears on the same line as the subsequent block."
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["1tbs", "stroustrup", "allman"]
        },
        {
          "type": "object",
          "properties": {
            "allowSingleLine": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "class-literal-property-style": {
    "defaultOptions": ["fields"],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce that literals on classes are exposed in a consistent style",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/class-literal-property-style"
      },
      "fixable": "code",
      "messages": {
        "preferFieldStyle": "Literals should be exposed using readonly fields.",
        "preferGetterStyle": "Literals should be exposed using getters."
      },
      "schema": [
        {
          "enum": ["fields", "getters"]
        }
      ]
    }
  },
  "comma-dangle": {
    "defaultOptions": ["never"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow trailing commas",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/comma-dangle"
      },
      "schema": {
        "$defs": {
          "value": {
            "enum": ["always-multiline", "always", "never", "only-multiline"]
          },
          "valueWithIgnore": {
            "enum": [
              "always-multiline",
              "always",
              "never",
              "only-multiline",
              "ignore"
            ]
          }
        },
        "type": "array",
        "items": [
          {
            "oneOf": [
              {
                "$ref": "#/$defs/value"
              },
              {
                "type": "object",
                "properties": {
                  "arrays": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "objects": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "imports": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "exports": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "functions": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "enums": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "generics": {
                    "$ref": "#/$defs/valueWithIgnore"
                  },
                  "tuples": {
                    "$ref": "#/$defs/valueWithIgnore"
                  }
                },
                "additionalProperties": false
              }
            ]
          }
        ],
        "additionalProperties": false
      },
      "fixable": "code",
      "messages": {
        "unexpected": "Unexpected trailing comma.",
        "missing": "Missing trailing comma."
      }
    }
  },
  "comma-spacing": {
    "defaultOptions": [
      {
        "before": false,
        "after": true
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after commas",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/comma-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean",
              "default": false
            },
            "after": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "There should be no space {{loc}} ','.",
        "missing": "A space is required {{loc}} ','."
      }
    }
  },
  "consistent-generic-constructors": {
    "defaultOptions": ["constructor"],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce specifying generic type arguments on type annotation or constructor name of a constructor call",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/consistent-generic-constructors"
      },
      "messages": {
        "preferTypeAnnotation": "The generic type arguments should be specified as part of the type annotation.",
        "preferConstructor": "The generic type arguments should be specified as part of the constructor type arguments."
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["type-annotation", "constructor"]
        }
      ]
    }
  },
  "consistent-indexed-object-style": {
    "defaultOptions": ["record"],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow the `Record` type",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/consistent-indexed-object-style"
      },
      "messages": {
        "preferRecord": "A record is preferred over an index signature.",
        "preferIndexSignature": "An index signature is preferred over a record."
      },
      "fixable": "code",
      "schema": [
        {
          "enum": ["record", "index-signature"]
        }
      ]
    }
  },
  "consistent-type-assertions": {
    "defaultOptions": [
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow"
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type assertions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/consistent-type-assertions"
      },
      "messages": {
        "as": "Use 'as {{cast}}' instead of '<{{cast}}>'.",
        "angle-bracket": "Use '<{{cast}}>' instead of 'as {{cast}}'.",
        "never": "Do not use any type assertions.",
        "unexpectedObjectTypeAssertion": "Always prefer const x: T = { ... }."
      },
      "schema": [
        {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "assertionStyle": {
                  "enum": ["never"]
                }
              },
              "additionalProperties": false,
              "required": ["assertionStyle"]
            },
            {
              "type": "object",
              "properties": {
                "assertionStyle": {
                  "enum": ["as", "angle-bracket"]
                },
                "objectLiteralTypeAssertions": {
                  "enum": ["allow", "allow-as-parameter", "never"]
                }
              },
              "additionalProperties": false,
              "required": ["assertionStyle"]
            }
          ]
        }
      ]
    }
  },
  "consistent-type-definitions": {
    "defaultOptions": ["interface"],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce type definitions to consistently use either `interface` or `type`",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/consistent-type-definitions"
      },
      "messages": {
        "interfaceOverType": "Use an `interface` instead of a `type`.",
        "typeOverInterface": "Use a `type` instead of an `interface`."
      },
      "schema": [
        {
          "enum": ["interface", "type"]
        }
      ],
      "fixable": "code"
    }
  },
  "consistent-type-exports": {
    "defaultOptions": [
      {
        "fixMixedExportsWithInlineTypeSpecifier": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type exports",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/consistent-type-exports"
      },
      "messages": {
        "typeOverValue": "All exports in the declaration are only used as types. Use `export type`.",
        "singleExportIsType": "Type export {{exportNames}} is not a value and should be exported using `export type`.",
        "multipleExportsAreTypes": "Type exports {{exportNames}} are not values and should be exported using `export type`."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "fixMixedExportsWithInlineTypeSpecifier": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code"
    }
  },
  "consistent-type-imports": {
    "defaultOptions": [
      {
        "prefer": "type-imports",
        "disallowTypeAnnotations": true,
        "fixStyle": "separate-type-imports"
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce consistent usage of type imports",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/consistent-type-imports"
      },
      "messages": {
        "typeOverValue": "All imports in the declaration are only used as types. Use `import type`.",
        "someImportsAreOnlyTypes": "Imports {{typeImports}} are only used as types.",
        "aImportIsOnlyTypes": "Import {{typeImports}} is only used as types.",
        "someImportsInDecoMeta": "Type imports {{typeImports}} are used by decorator metadata.",
        "aImportInDecoMeta": "Type import {{typeImports}} is used by decorator metadata.",
        "valueOverType": "Use an `import` instead of an `import type`.",
        "noImportTypeAnnotations": "`import()` type annotations are forbidden."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "prefer": {
              "enum": ["type-imports", "no-type-imports"]
            },
            "disallowTypeAnnotations": {
              "type": "boolean"
            },
            "fixStyle": {
              "enum": ["separate-type-imports", "inline-type-imports"]
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code"
    }
  },
  "default-param-last": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce default parameters to be last",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/default-param-last"
      },
      "schema": [],
      "messages": {
        "shouldBeLast": "Default parameters should be last."
      }
    }
  },
  "dot-notation": {
    "defaultOptions": [
      {
        "allowPrivateClassPropertyAccess": false,
        "allowProtectedClassPropertyAccess": false,
        "allowIndexSignaturePropertyAccess": false,
        "allowKeywords": true,
        "allowPattern": ""
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce dot notation whenever possible",
        "recommended": "strict",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/dot-notation"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowKeywords": {
              "type": "boolean",
              "default": true
            },
            "allowPattern": {
              "type": "string",
              "default": ""
            },
            "allowPrivateClassPropertyAccess": {
              "type": "boolean",
              "default": false
            },
            "allowProtectedClassPropertyAccess": {
              "type": "boolean",
              "default": false
            },
            "allowIndexSignaturePropertyAccess": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code",
      "messages": {
        "useDot": "[{{key}}] is better written in dot notation.",
        "useBrackets": ".{{key}} is a syntax error."
      }
    }
  },
  "explicit-function-return-type": {
    "defaultOptions": [
      {
        "allowExpressions": false,
        "allowTypedFunctionExpressions": true,
        "allowHigherOrderFunctions": true,
        "allowDirectConstAssertionInArrowFunctions": true,
        "allowConciseArrowFunctionExpressionsStartingWithVoid": false,
        "allowedNames": []
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return types on functions and class methods",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/explicit-function-return-type"
      },
      "messages": {
        "missingReturnType": "Missing return type on function."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowConciseArrowFunctionExpressionsStartingWithVoid": {
              "description": "Whether to allow arrow functions that start with the `void` keyword.",
              "type": "boolean"
            },
            "allowExpressions": {
              "description": "Whether to ignore function expressions (functions which are not part of a declaration).",
              "type": "boolean"
            },
            "allowHigherOrderFunctions": {
              "description": "Whether to ignore functions immediately returning another function expression.",
              "type": "boolean"
            },
            "allowTypedFunctionExpressions": {
              "description": "Whether to ignore type annotations on the variable of function expressions.",
              "type": "boolean"
            },
            "allowDirectConstAssertionInArrowFunctions": {
              "description": "Whether to ignore arrow functions immediately returning a `as const` value.",
              "type": "boolean"
            },
            "allowedNames": {
              "description": "An array of function/method names that will not have their arguments or return values checked.",
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "explicit-member-accessibility": {
    "defaultOptions": [
      {
        "accessibility": "explicit"
      }
    ],
    "meta": {
      "hasSuggestions": true,
      "type": "problem",
      "docs": {
        "description": "Require explicit accessibility modifiers on class properties and methods",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/explicit-member-accessibility"
      },
      "fixable": "code",
      "messages": {
        "missingAccessibility": "Missing accessibility modifier on {{type}} {{name}}.",
        "unwantedPublicAccessibility": "Public accessibility modifier on {{type}} {{name}}.",
        "addExplicitAccessibility": "Add '{{ type }}' accessibility modifier"
      },
      "schema": {
        "$defs": {
          "accessibilityLevel": {
            "oneOf": [
              {
                "const": "explicit",
                "description": "Always require an accessor."
              },
              {
                "const": "no-public",
                "description": "Require an accessor except when public."
              },
              {
                "const": "off",
                "description": "Never check whether there is an accessor."
              }
            ]
          }
        },
        "prefixItems": [
          {
            "type": "object",
            "properties": {
              "accessibility": {
                "$ref": "#/$defs/accessibilityLevel"
              },
              "overrides": {
                "type": "object",
                "properties": {
                  "accessors": {
                    "$ref": "#/$defs/accessibilityLevel"
                  },
                  "constructors": {
                    "$ref": "#/$defs/accessibilityLevel"
                  },
                  "methods": {
                    "$ref": "#/$defs/accessibilityLevel"
                  },
                  "properties": {
                    "$ref": "#/$defs/accessibilityLevel"
                  },
                  "parameterProperties": {
                    "$ref": "#/$defs/accessibilityLevel"
                  }
                },
                "additionalProperties": false
              },
              "ignoredMethodNames": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "array"
      }
    }
  },
  "explicit-module-boundary-types": {
    "defaultOptions": [
      {
        "allowArgumentsExplicitlyTypedAsAny": false,
        "allowDirectConstAssertionInArrowFunctions": true,
        "allowedNames": [],
        "allowHigherOrderFunctions": true,
        "allowTypedFunctionExpressions": true
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Require explicit return and argument types on exported functions' and classes' public class methods",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/explicit-module-boundary-types"
      },
      "messages": {
        "missingReturnType": "Missing return type on function.",
        "missingArgType": "Argument '{{name}}' should be typed.",
        "missingArgTypeUnnamed": "{{type}} argument should be typed.",
        "anyTypedArg": "Argument '{{name}}' should be typed with a non-any type.",
        "anyTypedArgUnnamed": "{{type}} argument should be typed with a non-any type."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowArgumentsExplicitlyTypedAsAny": {
              "description": "Whether to ignore arguments that are explicitly typed as `any`.",
              "type": "boolean"
            },
            "allowDirectConstAssertionInArrowFunctions": {
              "description": "Whether to ignore return type annotations on body-less arrow functions that return an `as const` type assertion.\nYou must still type the parameters of the function.",
              "type": "boolean"
            },
            "allowedNames": {
              "description": "An array of function/method names that will not have their arguments or return values checked.",
              "items": {
                "type": "string"
              },
              "type": "array"
            },
            "allowHigherOrderFunctions": {
              "description": "Whether to ignore return type annotations on functions immediately returning another function expression.\nYou must still type the parameters of the function.",
              "type": "boolean"
            },
            "allowTypedFunctionExpressions": {
              "description": "Whether to ignore type annotations on the variable of a function expresion.",
              "type": "boolean"
            },
            "shouldTrackReferences": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "func-call-spacing": {
    "defaultOptions": ["never", {}],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow spacing between function identifiers and their invocations",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/func-call-spacing"
      },
      "fixable": "whitespace",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["never"]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["always"]
              },
              {
                "type": "object",
                "properties": {
                  "allowNewlines": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "unexpectedWhitespace": "Unexpected whitespace between function name and paren.",
        "unexpectedNewline": "Unexpected newline between function name and paren.",
        "missing": "Missing space between function name and paren."
      }
    }
  },
  "indent": {
    "defaultOptions": [
      4,
      {
        "SwitchCase": 1,
        "flatTernaryExpressions": false,
        "ignoredNodes": []
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent indentation",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/indent"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["tab"]
            },
            {
              "type": "integer",
              "minimum": 0
            }
          ]
        },
        {
          "type": "object",
          "properties": {
            "SwitchCase": {
              "type": "integer",
              "minimum": 0,
              "default": 0
            },
            "VariableDeclarator": {
              "oneOf": [
                {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "enum": ["first", "off"]
                    }
                  ]
                },
                {
                  "type": "object",
                  "properties": {
                    "var": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "enum": ["first", "off"]
                        }
                      ]
                    },
                    "let": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "enum": ["first", "off"]
                        }
                      ]
                    },
                    "const": {
                      "oneOf": [
                        {
                          "type": "integer",
                          "minimum": 0
                        },
                        {
                          "enum": ["first", "off"]
                        }
                      ]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "outerIIFEBody": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "enum": ["off"]
                }
              ]
            },
            "MemberExpression": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "enum": ["off"]
                }
              ]
            },
            "FunctionDeclaration": {
              "type": "object",
              "properties": {
                "parameters": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "enum": ["first", "off"]
                    }
                  ]
                },
                "body": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "FunctionExpression": {
              "type": "object",
              "properties": {
                "parameters": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "enum": ["first", "off"]
                    }
                  ]
                },
                "body": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "StaticBlock": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "integer",
                  "minimum": 0
                }
              },
              "additionalProperties": false
            },
            "CallExpression": {
              "type": "object",
              "properties": {
                "arguments": {
                  "oneOf": [
                    {
                      "type": "integer",
                      "minimum": 0
                    },
                    {
                      "enum": ["first", "off"]
                    }
                  ]
                }
              },
              "additionalProperties": false
            },
            "ArrayExpression": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "enum": ["first", "off"]
                }
              ]
            },
            "ObjectExpression": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "enum": ["first", "off"]
                }
              ]
            },
            "ImportDeclaration": {
              "oneOf": [
                {
                  "type": "integer",
                  "minimum": 0
                },
                {
                  "enum": ["first", "off"]
                }
              ]
            },
            "flatTernaryExpressions": {
              "type": "boolean",
              "default": false
            },
            "offsetTernaryExpressions": {
              "type": "boolean",
              "default": false
            },
            "ignoredNodes": {
              "type": "array",
              "items": {
                "type": "string",
                "not": {
                  "pattern": ":exit$"
                }
              }
            },
            "ignoreComments": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "wrongIndentation": "Expected indentation of {{expected}} but found {{actual}}."
      }
    }
  },
  "init-declarations": {
    "defaultOptions": ["always"],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require or disallow initialization in variable declarations",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/init-declarations"
      },
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["always"]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["never"]
              },
              {
                "type": "object",
                "properties": {
                  "ignoreForLoopInit": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "initialized": "Variable '{{idName}}' should be initialized on declaration.",
        "notInitialized": "Variable '{{idName}}' should not be initialized on declaration."
      }
    }
  },
  "key-spacing": {
    "defaultOptions": [{}],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing between property names and type annotations in types and interfaces",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/key-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "align": {
                  "anyOf": [
                    {
                      "enum": ["colon", "value"]
                    },
                    {
                      "type": "object",
                      "properties": {
                        "mode": {
                          "enum": ["strict", "minimum"]
                        },
                        "on": {
                          "enum": ["colon", "value"]
                        },
                        "beforeColon": {
                          "type": "boolean"
                        },
                        "afterColon": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  ]
                },
                "mode": {
                  "enum": ["strict", "minimum"]
                },
                "beforeColon": {
                  "type": "boolean"
                },
                "afterColon": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "singleLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "multiLine": {
                  "type": "object",
                  "properties": {
                    "align": {
                      "anyOf": [
                        {
                          "enum": ["colon", "value"]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "mode": {
                              "enum": ["strict", "minimum"]
                            },
                            "on": {
                              "enum": ["colon", "value"]
                            },
                            "beforeColon": {
                              "type": "boolean"
                            },
                            "afterColon": {
                              "type": "boolean"
                            }
                          },
                          "additionalProperties": false
                        }
                      ]
                    },
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "singleLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "multiLine": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "align": {
                  "type": "object",
                  "properties": {
                    "mode": {
                      "enum": ["strict", "minimum"]
                    },
                    "on": {
                      "enum": ["colon", "value"]
                    },
                    "beforeColon": {
                      "type": "boolean"
                    },
                    "afterColon": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "extraKey": "Extra space after {{computed}}key '{{key}}'.",
        "extraValue": "Extra space before value for {{computed}}key '{{key}}'.",
        "missingKey": "Missing space after {{computed}}key '{{key}}'.",
        "missingValue": "Missing space before value for {{computed}}key '{{key}}'."
      }
    }
  },
  "keyword-spacing": {
    "defaultOptions": [{}],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before and after keywords",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/keyword-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean",
              "default": true
            },
            "after": {
              "type": "boolean",
              "default": true
            },
            "overrides": {
              "type": "object",
              "properties": {
                "abstract": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "as": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "async": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "await": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "boolean": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "break": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "byte": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "case": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "catch": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "char": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "class": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "const": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "continue": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "debugger": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "default": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "delete": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "do": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "double": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "else": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "enum": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "export": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "extends": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "false": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "final": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "finally": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "float": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "for": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "from": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "function": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "get": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "goto": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "if": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "implements": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "import": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "in": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "instanceof": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "int": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "interface": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "let": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "long": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "native": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "new": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "null": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "of": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "package": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "private": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "protected": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "public": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "return": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "set": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "short": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "static": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "super": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "switch": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "synchronized": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "this": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "throw": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "throws": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "transient": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "true": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "try": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "typeof": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "var": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "void": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "volatile": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "while": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "with": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "yield": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "type": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "expectedBefore": "Expected space(s) before \"{{value}}\".",
        "expectedAfter": "Expected space(s) after \"{{value}}\".",
        "unexpectedBefore": "Unexpected space(s) before \"{{value}}\".",
        "unexpectedAfter": "Unexpected space(s) after \"{{value}}\"."
      }
    }
  },
  "lines-between-class-members": {
    "defaultOptions": [
      "always",
      {
        "exceptAfterOverload": true,
        "exceptAfterSingleLine": false
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow an empty line between class members",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/lines-between-class-members"
      },
      "fixable": "whitespace",
      "schema": {
        "0": {
          "enum": ["always", "never"]
        },
        "1": {
          "type": "object",
          "properties": {
            "exceptAfterSingleLine": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false,
          "exceptAfterOverload": {
            "type": "boolean",
            "default": true
          }
        }
      },
      "messages": {
        "never": "Unexpected blank line between class members.",
        "always": "Expected blank line between class members."
      }
    }
  },
  "member-delimiter-style": {
    "defaultOptions": [
      {
        "multiline": {
          "delimiter": "semi",
          "requireLast": true
        },
        "singleline": {
          "delimiter": "semi",
          "requireLast": false
        },
        "multilineDetection": "brackets"
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require a specific member delimiter style for interfaces and type literals",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/member-delimiter-style"
      },
      "fixable": "whitespace",
      "messages": {
        "unexpectedComma": "Unexpected separator (,).",
        "unexpectedSemi": "Unexpected separator (;).",
        "expectedComma": "Expected a comma.",
        "expectedSemi": "Expected a semicolon."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "multiline": {
              "type": "object",
              "properties": {
                "delimiter": {
                  "enum": ["none", "semi", "comma"]
                },
                "requireLast": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "singleline": {
              "type": "object",
              "properties": {
                "delimiter": {
                  "enum": ["semi", "comma"]
                },
                "requireLast": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            },
            "overrides": {
              "type": "object",
              "properties": {
                "interface": {
                  "type": "object",
                  "properties": {
                    "multiline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "enum": ["none", "semi", "comma"]
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "singleline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "enum": ["semi", "comma"]
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "typeLiteral": {
                  "type": "object",
                  "properties": {
                    "multiline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "enum": ["none", "semi", "comma"]
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    },
                    "singleline": {
                      "type": "object",
                      "properties": {
                        "delimiter": {
                          "enum": ["semi", "comma"]
                        },
                        "requireLast": {
                          "type": "boolean"
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            "multilineDetection": {
              "enum": ["brackets", "last-member"]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "member-ordering": {
    "defaultOptions": [
      {
        "default": [
          "signature",
          "call-signature",
          "public-static-field",
          "protected-static-field",
          "private-static-field",
          "#private-static-field",
          "public-decorated-field",
          "protected-decorated-field",
          "private-decorated-field",
          "public-instance-field",
          "protected-instance-field",
          "private-instance-field",
          "#private-instance-field",
          "public-abstract-field",
          "protected-abstract-field",
          "public-field",
          "protected-field",
          "private-field",
          "#private-field",
          "static-field",
          "instance-field",
          "abstract-field",
          "decorated-field",
          "field",
          "static-initialization",
          "public-constructor",
          "protected-constructor",
          "private-constructor",
          "constructor",
          "public-static-get",
          "protected-static-get",
          "private-static-get",
          "#private-static-get",
          "public-decorated-get",
          "protected-decorated-get",
          "private-decorated-get",
          "public-instance-get",
          "protected-instance-get",
          "private-instance-get",
          "#private-instance-get",
          "public-abstract-get",
          "protected-abstract-get",
          "public-get",
          "protected-get",
          "private-get",
          "#private-get",
          "static-get",
          "instance-get",
          "abstract-get",
          "decorated-get",
          "get",
          "public-static-set",
          "protected-static-set",
          "private-static-set",
          "#private-static-set",
          "public-decorated-set",
          "protected-decorated-set",
          "private-decorated-set",
          "public-instance-set",
          "protected-instance-set",
          "private-instance-set",
          "#private-instance-set",
          "public-abstract-set",
          "protected-abstract-set",
          "public-set",
          "protected-set",
          "private-set",
          "#private-set",
          "static-set",
          "instance-set",
          "abstract-set",
          "decorated-set",
          "set",
          "public-static-method",
          "protected-static-method",
          "private-static-method",
          "#private-static-method",
          "public-decorated-method",
          "protected-decorated-method",
          "private-decorated-method",
          "public-instance-method",
          "protected-instance-method",
          "private-instance-method",
          "#private-instance-method",
          "public-abstract-method",
          "protected-abstract-method",
          "public-method",
          "protected-method",
          "private-method",
          "#private-method",
          "static-method",
          "instance-method",
          "abstract-method",
          "decorated-method",
          "method"
        ]
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require a consistent member declaration order",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/member-ordering"
      },
      "messages": {
        "incorrectOrder": "Member {{member}} should be declared before member {{beforeMember}}.",
        "incorrectGroupOrder": "Member {{name}} should be declared before all {{rank}} definitions.",
        "incorrectRequiredMembersOrder": "Member {{member}} should be declared after all {{optionalOrRequired}} members."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "default": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": ["never"]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "enum": [
                          "signature",
                          "field",
                          "public-field",
                          "public-decorated-field",
                          "decorated-field",
                          "static-field",
                          "public-static-field",
                          "instance-field",
                          "public-instance-field",
                          "abstract-field",
                          "public-abstract-field",
                          "protected-field",
                          "protected-decorated-field",
                          "protected-static-field",
                          "protected-instance-field",
                          "protected-abstract-field",
                          "private-field",
                          "private-decorated-field",
                          "private-static-field",
                          "private-instance-field",
                          "#private-field",
                          "#private-static-field",
                          "#private-instance-field",
                          "method",
                          "public-method",
                          "public-decorated-method",
                          "decorated-method",
                          "static-method",
                          "public-static-method",
                          "instance-method",
                          "public-instance-method",
                          "abstract-method",
                          "public-abstract-method",
                          "protected-method",
                          "protected-decorated-method",
                          "protected-static-method",
                          "protected-instance-method",
                          "protected-abstract-method",
                          "private-method",
                          "private-decorated-method",
                          "private-static-method",
                          "private-instance-method",
                          "#private-method",
                          "#private-static-method",
                          "#private-instance-method",
                          "call-signature",
                          "constructor",
                          "public-constructor",
                          "protected-constructor",
                          "private-constructor",
                          "get",
                          "public-get",
                          "public-decorated-get",
                          "decorated-get",
                          "static-get",
                          "public-static-get",
                          "instance-get",
                          "public-instance-get",
                          "abstract-get",
                          "public-abstract-get",
                          "protected-get",
                          "protected-decorated-get",
                          "protected-static-get",
                          "protected-instance-get",
                          "protected-abstract-get",
                          "private-get",
                          "private-decorated-get",
                          "private-static-get",
                          "private-instance-get",
                          "#private-get",
                          "#private-static-get",
                          "#private-instance-get",
                          "set",
                          "public-set",
                          "public-decorated-set",
                          "decorated-set",
                          "static-set",
                          "public-static-set",
                          "instance-set",
                          "public-instance-set",
                          "abstract-set",
                          "public-abstract-set",
                          "protected-set",
                          "protected-decorated-set",
                          "protected-static-set",
                          "protected-instance-set",
                          "protected-abstract-set",
                          "private-set",
                          "private-decorated-set",
                          "private-static-set",
                          "private-instance-set",
                          "#private-set",
                          "#private-static-set",
                          "#private-instance-set",
                          "static-initialization",
                          "static-static-initialization",
                          "public-static-static-initialization",
                          "instance-static-initialization",
                          "public-instance-static-initialization",
                          "abstract-static-initialization",
                          "public-abstract-static-initialization",
                          "protected-static-static-initialization",
                          "protected-instance-static-initialization",
                          "protected-abstract-static-initialization",
                          "private-static-static-initialization",
                          "private-instance-static-initialization",
                          "#private-static-static-initialization",
                          "#private-instance-static-initialization"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "enum": [
                            "signature",
                            "field",
                            "public-field",
                            "public-decorated-field",
                            "decorated-field",
                            "static-field",
                            "public-static-field",
                            "instance-field",
                            "public-instance-field",
                            "abstract-field",
                            "public-abstract-field",
                            "protected-field",
                            "protected-decorated-field",
                            "protected-static-field",
                            "protected-instance-field",
                            "protected-abstract-field",
                            "private-field",
                            "private-decorated-field",
                            "private-static-field",
                            "private-instance-field",
                            "#private-field",
                            "#private-static-field",
                            "#private-instance-field",
                            "method",
                            "public-method",
                            "public-decorated-method",
                            "decorated-method",
                            "static-method",
                            "public-static-method",
                            "instance-method",
                            "public-instance-method",
                            "abstract-method",
                            "public-abstract-method",
                            "protected-method",
                            "protected-decorated-method",
                            "protected-static-method",
                            "protected-instance-method",
                            "protected-abstract-method",
                            "private-method",
                            "private-decorated-method",
                            "private-static-method",
                            "private-instance-method",
                            "#private-method",
                            "#private-static-method",
                            "#private-instance-method",
                            "call-signature",
                            "constructor",
                            "public-constructor",
                            "protected-constructor",
                            "private-constructor",
                            "get",
                            "public-get",
                            "public-decorated-get",
                            "decorated-get",
                            "static-get",
                            "public-static-get",
                            "instance-get",
                            "public-instance-get",
                            "abstract-get",
                            "public-abstract-get",
                            "protected-get",
                            "protected-decorated-get",
                            "protected-static-get",
                            "protected-instance-get",
                            "protected-abstract-get",
                            "private-get",
                            "private-decorated-get",
                            "private-static-get",
                            "private-instance-get",
                            "#private-get",
                            "#private-static-get",
                            "#private-instance-get",
                            "set",
                            "public-set",
                            "public-decorated-set",
                            "decorated-set",
                            "static-set",
                            "public-static-set",
                            "instance-set",
                            "public-instance-set",
                            "abstract-set",
                            "public-abstract-set",
                            "protected-set",
                            "protected-decorated-set",
                            "protected-static-set",
                            "protected-instance-set",
                            "protected-abstract-set",
                            "private-set",
                            "private-decorated-set",
                            "private-static-set",
                            "private-instance-set",
                            "#private-set",
                            "#private-static-set",
                            "#private-instance-set",
                            "static-initialization",
                            "static-static-initialization",
                            "public-static-static-initialization",
                            "instance-static-initialization",
                            "public-instance-static-initialization",
                            "abstract-static-initialization",
                            "public-abstract-static-initialization",
                            "protected-static-static-initialization",
                            "protected-instance-static-initialization",
                            "protected-abstract-static-initialization",
                            "private-static-static-initialization",
                            "private-instance-static-initialization",
                            "#private-static-static-initialization",
                            "#private-instance-static-initialization"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "memberTypes": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "enum": [
                                  "signature",
                                  "field",
                                  "public-field",
                                  "public-decorated-field",
                                  "decorated-field",
                                  "static-field",
                                  "public-static-field",
                                  "instance-field",
                                  "public-instance-field",
                                  "abstract-field",
                                  "public-abstract-field",
                                  "protected-field",
                                  "protected-decorated-field",
                                  "protected-static-field",
                                  "protected-instance-field",
                                  "protected-abstract-field",
                                  "private-field",
                                  "private-decorated-field",
                                  "private-static-field",
                                  "private-instance-field",
                                  "#private-field",
                                  "#private-static-field",
                                  "#private-instance-field",
                                  "method",
                                  "public-method",
                                  "public-decorated-method",
                                  "decorated-method",
                                  "static-method",
                                  "public-static-method",
                                  "instance-method",
                                  "public-instance-method",
                                  "abstract-method",
                                  "public-abstract-method",
                                  "protected-method",
                                  "protected-decorated-method",
                                  "protected-static-method",
                                  "protected-instance-method",
                                  "protected-abstract-method",
                                  "private-method",
                                  "private-decorated-method",
                                  "private-static-method",
                                  "private-instance-method",
                                  "#private-method",
                                  "#private-static-method",
                                  "#private-instance-method",
                                  "call-signature",
                                  "constructor",
                                  "public-constructor",
                                  "protected-constructor",
                                  "private-constructor",
                                  "get",
                                  "public-get",
                                  "public-decorated-get",
                                  "decorated-get",
                                  "static-get",
                                  "public-static-get",
                                  "instance-get",
                                  "public-instance-get",
                                  "abstract-get",
                                  "public-abstract-get",
                                  "protected-get",
                                  "protected-decorated-get",
                                  "protected-static-get",
                                  "protected-instance-get",
                                  "protected-abstract-get",
                                  "private-get",
                                  "private-decorated-get",
                                  "private-static-get",
                                  "private-instance-get",
                                  "#private-get",
                                  "#private-static-get",
                                  "#private-instance-get",
                                  "set",
                                  "public-set",
                                  "public-decorated-set",
                                  "decorated-set",
                                  "static-set",
                                  "public-static-set",
                                  "instance-set",
                                  "public-instance-set",
                                  "abstract-set",
                                  "public-abstract-set",
                                  "protected-set",
                                  "protected-decorated-set",
                                  "protected-static-set",
                                  "protected-instance-set",
                                  "protected-abstract-set",
                                  "private-set",
                                  "private-decorated-set",
                                  "private-static-set",
                                  "private-instance-set",
                                  "#private-set",
                                  "#private-static-set",
                                  "#private-instance-set",
                                  "static-initialization",
                                  "static-static-initialization",
                                  "public-static-static-initialization",
                                  "instance-static-initialization",
                                  "public-instance-static-initialization",
                                  "abstract-static-initialization",
                                  "public-abstract-static-initialization",
                                  "protected-static-static-initialization",
                                  "protected-instance-static-initialization",
                                  "protected-abstract-static-initialization",
                                  "private-static-static-initialization",
                                  "private-instance-static-initialization",
                                  "#private-static-static-initialization",
                                  "#private-instance-static-initialization"
                                ]
                              },
                              {
                                "type": "array",
                                "items": {
                                  "enum": [
                                    "signature",
                                    "field",
                                    "public-field",
                                    "public-decorated-field",
                                    "decorated-field",
                                    "static-field",
                                    "public-static-field",
                                    "instance-field",
                                    "public-instance-field",
                                    "abstract-field",
                                    "public-abstract-field",
                                    "protected-field",
                                    "protected-decorated-field",
                                    "protected-static-field",
                                    "protected-instance-field",
                                    "protected-abstract-field",
                                    "private-field",
                                    "private-decorated-field",
                                    "private-static-field",
                                    "private-instance-field",
                                    "#private-field",
                                    "#private-static-field",
                                    "#private-instance-field",
                                    "method",
                                    "public-method",
                                    "public-decorated-method",
                                    "decorated-method",
                                    "static-method",
                                    "public-static-method",
                                    "instance-method",
                                    "public-instance-method",
                                    "abstract-method",
                                    "public-abstract-method",
                                    "protected-method",
                                    "protected-decorated-method",
                                    "protected-static-method",
                                    "protected-instance-method",
                                    "protected-abstract-method",
                                    "private-method",
                                    "private-decorated-method",
                                    "private-static-method",
                                    "private-instance-method",
                                    "#private-method",
                                    "#private-static-method",
                                    "#private-instance-method",
                                    "call-signature",
                                    "constructor",
                                    "public-constructor",
                                    "protected-constructor",
                                    "private-constructor",
                                    "get",
                                    "public-get",
                                    "public-decorated-get",
                                    "decorated-get",
                                    "static-get",
                                    "public-static-get",
                                    "instance-get",
                                    "public-instance-get",
                                    "abstract-get",
                                    "public-abstract-get",
                                    "protected-get",
                                    "protected-decorated-get",
                                    "protected-static-get",
                                    "protected-instance-get",
                                    "protected-abstract-get",
                                    "private-get",
                                    "private-decorated-get",
                                    "private-static-get",
                                    "private-instance-get",
                                    "#private-get",
                                    "#private-static-get",
                                    "#private-instance-get",
                                    "set",
                                    "public-set",
                                    "public-decorated-set",
                                    "decorated-set",
                                    "static-set",
                                    "public-static-set",
                                    "instance-set",
                                    "public-instance-set",
                                    "abstract-set",
                                    "public-abstract-set",
                                    "protected-set",
                                    "protected-decorated-set",
                                    "protected-static-set",
                                    "protected-instance-set",
                                    "protected-abstract-set",
                                    "private-set",
                                    "private-decorated-set",
                                    "private-static-set",
                                    "private-instance-set",
                                    "#private-set",
                                    "#private-static-set",
                                    "#private-instance-set",
                                    "static-initialization",
                                    "static-static-initialization",
                                    "public-static-static-initialization",
                                    "instance-static-initialization",
                                    "public-instance-static-initialization",
                                    "abstract-static-initialization",
                                    "public-abstract-static-initialization",
                                    "protected-static-static-initialization",
                                    "protected-instance-static-initialization",
                                    "protected-abstract-static-initialization",
                                    "private-static-static-initialization",
                                    "private-instance-static-initialization",
                                    "#private-static-static-initialization",
                                    "#private-instance-static-initialization"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "string",
                          "enum": ["never"]
                        }
                      ]
                    },
                    "order": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "optionalityOrder": {
                      "type": "string",
                      "enum": ["optional-first", "required-first"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "classes": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": ["never"]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "enum": [
                          "signature",
                          "field",
                          "public-field",
                          "public-decorated-field",
                          "decorated-field",
                          "static-field",
                          "public-static-field",
                          "instance-field",
                          "public-instance-field",
                          "abstract-field",
                          "public-abstract-field",
                          "protected-field",
                          "protected-decorated-field",
                          "protected-static-field",
                          "protected-instance-field",
                          "protected-abstract-field",
                          "private-field",
                          "private-decorated-field",
                          "private-static-field",
                          "private-instance-field",
                          "#private-field",
                          "#private-static-field",
                          "#private-instance-field",
                          "method",
                          "public-method",
                          "public-decorated-method",
                          "decorated-method",
                          "static-method",
                          "public-static-method",
                          "instance-method",
                          "public-instance-method",
                          "abstract-method",
                          "public-abstract-method",
                          "protected-method",
                          "protected-decorated-method",
                          "protected-static-method",
                          "protected-instance-method",
                          "protected-abstract-method",
                          "private-method",
                          "private-decorated-method",
                          "private-static-method",
                          "private-instance-method",
                          "#private-method",
                          "#private-static-method",
                          "#private-instance-method",
                          "call-signature",
                          "constructor",
                          "public-constructor",
                          "protected-constructor",
                          "private-constructor",
                          "get",
                          "public-get",
                          "public-decorated-get",
                          "decorated-get",
                          "static-get",
                          "public-static-get",
                          "instance-get",
                          "public-instance-get",
                          "abstract-get",
                          "public-abstract-get",
                          "protected-get",
                          "protected-decorated-get",
                          "protected-static-get",
                          "protected-instance-get",
                          "protected-abstract-get",
                          "private-get",
                          "private-decorated-get",
                          "private-static-get",
                          "private-instance-get",
                          "#private-get",
                          "#private-static-get",
                          "#private-instance-get",
                          "set",
                          "public-set",
                          "public-decorated-set",
                          "decorated-set",
                          "static-set",
                          "public-static-set",
                          "instance-set",
                          "public-instance-set",
                          "abstract-set",
                          "public-abstract-set",
                          "protected-set",
                          "protected-decorated-set",
                          "protected-static-set",
                          "protected-instance-set",
                          "protected-abstract-set",
                          "private-set",
                          "private-decorated-set",
                          "private-static-set",
                          "private-instance-set",
                          "#private-set",
                          "#private-static-set",
                          "#private-instance-set",
                          "static-initialization",
                          "static-static-initialization",
                          "public-static-static-initialization",
                          "instance-static-initialization",
                          "public-instance-static-initialization",
                          "abstract-static-initialization",
                          "public-abstract-static-initialization",
                          "protected-static-static-initialization",
                          "protected-instance-static-initialization",
                          "protected-abstract-static-initialization",
                          "private-static-static-initialization",
                          "private-instance-static-initialization",
                          "#private-static-static-initialization",
                          "#private-instance-static-initialization"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "enum": [
                            "signature",
                            "field",
                            "public-field",
                            "public-decorated-field",
                            "decorated-field",
                            "static-field",
                            "public-static-field",
                            "instance-field",
                            "public-instance-field",
                            "abstract-field",
                            "public-abstract-field",
                            "protected-field",
                            "protected-decorated-field",
                            "protected-static-field",
                            "protected-instance-field",
                            "protected-abstract-field",
                            "private-field",
                            "private-decorated-field",
                            "private-static-field",
                            "private-instance-field",
                            "#private-field",
                            "#private-static-field",
                            "#private-instance-field",
                            "method",
                            "public-method",
                            "public-decorated-method",
                            "decorated-method",
                            "static-method",
                            "public-static-method",
                            "instance-method",
                            "public-instance-method",
                            "abstract-method",
                            "public-abstract-method",
                            "protected-method",
                            "protected-decorated-method",
                            "protected-static-method",
                            "protected-instance-method",
                            "protected-abstract-method",
                            "private-method",
                            "private-decorated-method",
                            "private-static-method",
                            "private-instance-method",
                            "#private-method",
                            "#private-static-method",
                            "#private-instance-method",
                            "call-signature",
                            "constructor",
                            "public-constructor",
                            "protected-constructor",
                            "private-constructor",
                            "get",
                            "public-get",
                            "public-decorated-get",
                            "decorated-get",
                            "static-get",
                            "public-static-get",
                            "instance-get",
                            "public-instance-get",
                            "abstract-get",
                            "public-abstract-get",
                            "protected-get",
                            "protected-decorated-get",
                            "protected-static-get",
                            "protected-instance-get",
                            "protected-abstract-get",
                            "private-get",
                            "private-decorated-get",
                            "private-static-get",
                            "private-instance-get",
                            "#private-get",
                            "#private-static-get",
                            "#private-instance-get",
                            "set",
                            "public-set",
                            "public-decorated-set",
                            "decorated-set",
                            "static-set",
                            "public-static-set",
                            "instance-set",
                            "public-instance-set",
                            "abstract-set",
                            "public-abstract-set",
                            "protected-set",
                            "protected-decorated-set",
                            "protected-static-set",
                            "protected-instance-set",
                            "protected-abstract-set",
                            "private-set",
                            "private-decorated-set",
                            "private-static-set",
                            "private-instance-set",
                            "#private-set",
                            "#private-static-set",
                            "#private-instance-set",
                            "static-initialization",
                            "static-static-initialization",
                            "public-static-static-initialization",
                            "instance-static-initialization",
                            "public-instance-static-initialization",
                            "abstract-static-initialization",
                            "public-abstract-static-initialization",
                            "protected-static-static-initialization",
                            "protected-instance-static-initialization",
                            "protected-abstract-static-initialization",
                            "private-static-static-initialization",
                            "private-instance-static-initialization",
                            "#private-static-static-initialization",
                            "#private-instance-static-initialization"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "memberTypes": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "enum": [
                                  "signature",
                                  "field",
                                  "public-field",
                                  "public-decorated-field",
                                  "decorated-field",
                                  "static-field",
                                  "public-static-field",
                                  "instance-field",
                                  "public-instance-field",
                                  "abstract-field",
                                  "public-abstract-field",
                                  "protected-field",
                                  "protected-decorated-field",
                                  "protected-static-field",
                                  "protected-instance-field",
                                  "protected-abstract-field",
                                  "private-field",
                                  "private-decorated-field",
                                  "private-static-field",
                                  "private-instance-field",
                                  "#private-field",
                                  "#private-static-field",
                                  "#private-instance-field",
                                  "method",
                                  "public-method",
                                  "public-decorated-method",
                                  "decorated-method",
                                  "static-method",
                                  "public-static-method",
                                  "instance-method",
                                  "public-instance-method",
                                  "abstract-method",
                                  "public-abstract-method",
                                  "protected-method",
                                  "protected-decorated-method",
                                  "protected-static-method",
                                  "protected-instance-method",
                                  "protected-abstract-method",
                                  "private-method",
                                  "private-decorated-method",
                                  "private-static-method",
                                  "private-instance-method",
                                  "#private-method",
                                  "#private-static-method",
                                  "#private-instance-method",
                                  "call-signature",
                                  "constructor",
                                  "public-constructor",
                                  "protected-constructor",
                                  "private-constructor",
                                  "get",
                                  "public-get",
                                  "public-decorated-get",
                                  "decorated-get",
                                  "static-get",
                                  "public-static-get",
                                  "instance-get",
                                  "public-instance-get",
                                  "abstract-get",
                                  "public-abstract-get",
                                  "protected-get",
                                  "protected-decorated-get",
                                  "protected-static-get",
                                  "protected-instance-get",
                                  "protected-abstract-get",
                                  "private-get",
                                  "private-decorated-get",
                                  "private-static-get",
                                  "private-instance-get",
                                  "#private-get",
                                  "#private-static-get",
                                  "#private-instance-get",
                                  "set",
                                  "public-set",
                                  "public-decorated-set",
                                  "decorated-set",
                                  "static-set",
                                  "public-static-set",
                                  "instance-set",
                                  "public-instance-set",
                                  "abstract-set",
                                  "public-abstract-set",
                                  "protected-set",
                                  "protected-decorated-set",
                                  "protected-static-set",
                                  "protected-instance-set",
                                  "protected-abstract-set",
                                  "private-set",
                                  "private-decorated-set",
                                  "private-static-set",
                                  "private-instance-set",
                                  "#private-set",
                                  "#private-static-set",
                                  "#private-instance-set",
                                  "static-initialization",
                                  "static-static-initialization",
                                  "public-static-static-initialization",
                                  "instance-static-initialization",
                                  "public-instance-static-initialization",
                                  "abstract-static-initialization",
                                  "public-abstract-static-initialization",
                                  "protected-static-static-initialization",
                                  "protected-instance-static-initialization",
                                  "protected-abstract-static-initialization",
                                  "private-static-static-initialization",
                                  "private-instance-static-initialization",
                                  "#private-static-static-initialization",
                                  "#private-instance-static-initialization"
                                ]
                              },
                              {
                                "type": "array",
                                "items": {
                                  "enum": [
                                    "signature",
                                    "field",
                                    "public-field",
                                    "public-decorated-field",
                                    "decorated-field",
                                    "static-field",
                                    "public-static-field",
                                    "instance-field",
                                    "public-instance-field",
                                    "abstract-field",
                                    "public-abstract-field",
                                    "protected-field",
                                    "protected-decorated-field",
                                    "protected-static-field",
                                    "protected-instance-field",
                                    "protected-abstract-field",
                                    "private-field",
                                    "private-decorated-field",
                                    "private-static-field",
                                    "private-instance-field",
                                    "#private-field",
                                    "#private-static-field",
                                    "#private-instance-field",
                                    "method",
                                    "public-method",
                                    "public-decorated-method",
                                    "decorated-method",
                                    "static-method",
                                    "public-static-method",
                                    "instance-method",
                                    "public-instance-method",
                                    "abstract-method",
                                    "public-abstract-method",
                                    "protected-method",
                                    "protected-decorated-method",
                                    "protected-static-method",
                                    "protected-instance-method",
                                    "protected-abstract-method",
                                    "private-method",
                                    "private-decorated-method",
                                    "private-static-method",
                                    "private-instance-method",
                                    "#private-method",
                                    "#private-static-method",
                                    "#private-instance-method",
                                    "call-signature",
                                    "constructor",
                                    "public-constructor",
                                    "protected-constructor",
                                    "private-constructor",
                                    "get",
                                    "public-get",
                                    "public-decorated-get",
                                    "decorated-get",
                                    "static-get",
                                    "public-static-get",
                                    "instance-get",
                                    "public-instance-get",
                                    "abstract-get",
                                    "public-abstract-get",
                                    "protected-get",
                                    "protected-decorated-get",
                                    "protected-static-get",
                                    "protected-instance-get",
                                    "protected-abstract-get",
                                    "private-get",
                                    "private-decorated-get",
                                    "private-static-get",
                                    "private-instance-get",
                                    "#private-get",
                                    "#private-static-get",
                                    "#private-instance-get",
                                    "set",
                                    "public-set",
                                    "public-decorated-set",
                                    "decorated-set",
                                    "static-set",
                                    "public-static-set",
                                    "instance-set",
                                    "public-instance-set",
                                    "abstract-set",
                                    "public-abstract-set",
                                    "protected-set",
                                    "protected-decorated-set",
                                    "protected-static-set",
                                    "protected-instance-set",
                                    "protected-abstract-set",
                                    "private-set",
                                    "private-decorated-set",
                                    "private-static-set",
                                    "private-instance-set",
                                    "#private-set",
                                    "#private-static-set",
                                    "#private-instance-set",
                                    "static-initialization",
                                    "static-static-initialization",
                                    "public-static-static-initialization",
                                    "instance-static-initialization",
                                    "public-instance-static-initialization",
                                    "abstract-static-initialization",
                                    "public-abstract-static-initialization",
                                    "protected-static-static-initialization",
                                    "protected-instance-static-initialization",
                                    "protected-abstract-static-initialization",
                                    "private-static-static-initialization",
                                    "private-instance-static-initialization",
                                    "#private-static-static-initialization",
                                    "#private-instance-static-initialization"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "string",
                          "enum": ["never"]
                        }
                      ]
                    },
                    "order": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "optionalityOrder": {
                      "type": "string",
                      "enum": ["optional-first", "required-first"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "classExpressions": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": ["never"]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "enum": [
                          "signature",
                          "field",
                          "public-field",
                          "public-decorated-field",
                          "decorated-field",
                          "static-field",
                          "public-static-field",
                          "instance-field",
                          "public-instance-field",
                          "abstract-field",
                          "public-abstract-field",
                          "protected-field",
                          "protected-decorated-field",
                          "protected-static-field",
                          "protected-instance-field",
                          "protected-abstract-field",
                          "private-field",
                          "private-decorated-field",
                          "private-static-field",
                          "private-instance-field",
                          "#private-field",
                          "#private-static-field",
                          "#private-instance-field",
                          "method",
                          "public-method",
                          "public-decorated-method",
                          "decorated-method",
                          "static-method",
                          "public-static-method",
                          "instance-method",
                          "public-instance-method",
                          "abstract-method",
                          "public-abstract-method",
                          "protected-method",
                          "protected-decorated-method",
                          "protected-static-method",
                          "protected-instance-method",
                          "protected-abstract-method",
                          "private-method",
                          "private-decorated-method",
                          "private-static-method",
                          "private-instance-method",
                          "#private-method",
                          "#private-static-method",
                          "#private-instance-method",
                          "call-signature",
                          "constructor",
                          "public-constructor",
                          "protected-constructor",
                          "private-constructor",
                          "get",
                          "public-get",
                          "public-decorated-get",
                          "decorated-get",
                          "static-get",
                          "public-static-get",
                          "instance-get",
                          "public-instance-get",
                          "abstract-get",
                          "public-abstract-get",
                          "protected-get",
                          "protected-decorated-get",
                          "protected-static-get",
                          "protected-instance-get",
                          "protected-abstract-get",
                          "private-get",
                          "private-decorated-get",
                          "private-static-get",
                          "private-instance-get",
                          "#private-get",
                          "#private-static-get",
                          "#private-instance-get",
                          "set",
                          "public-set",
                          "public-decorated-set",
                          "decorated-set",
                          "static-set",
                          "public-static-set",
                          "instance-set",
                          "public-instance-set",
                          "abstract-set",
                          "public-abstract-set",
                          "protected-set",
                          "protected-decorated-set",
                          "protected-static-set",
                          "protected-instance-set",
                          "protected-abstract-set",
                          "private-set",
                          "private-decorated-set",
                          "private-static-set",
                          "private-instance-set",
                          "#private-set",
                          "#private-static-set",
                          "#private-instance-set",
                          "static-initialization",
                          "static-static-initialization",
                          "public-static-static-initialization",
                          "instance-static-initialization",
                          "public-instance-static-initialization",
                          "abstract-static-initialization",
                          "public-abstract-static-initialization",
                          "protected-static-static-initialization",
                          "protected-instance-static-initialization",
                          "protected-abstract-static-initialization",
                          "private-static-static-initialization",
                          "private-instance-static-initialization",
                          "#private-static-static-initialization",
                          "#private-instance-static-initialization"
                        ]
                      },
                      {
                        "type": "array",
                        "items": {
                          "enum": [
                            "signature",
                            "field",
                            "public-field",
                            "public-decorated-field",
                            "decorated-field",
                            "static-field",
                            "public-static-field",
                            "instance-field",
                            "public-instance-field",
                            "abstract-field",
                            "public-abstract-field",
                            "protected-field",
                            "protected-decorated-field",
                            "protected-static-field",
                            "protected-instance-field",
                            "protected-abstract-field",
                            "private-field",
                            "private-decorated-field",
                            "private-static-field",
                            "private-instance-field",
                            "#private-field",
                            "#private-static-field",
                            "#private-instance-field",
                            "method",
                            "public-method",
                            "public-decorated-method",
                            "decorated-method",
                            "static-method",
                            "public-static-method",
                            "instance-method",
                            "public-instance-method",
                            "abstract-method",
                            "public-abstract-method",
                            "protected-method",
                            "protected-decorated-method",
                            "protected-static-method",
                            "protected-instance-method",
                            "protected-abstract-method",
                            "private-method",
                            "private-decorated-method",
                            "private-static-method",
                            "private-instance-method",
                            "#private-method",
                            "#private-static-method",
                            "#private-instance-method",
                            "call-signature",
                            "constructor",
                            "public-constructor",
                            "protected-constructor",
                            "private-constructor",
                            "get",
                            "public-get",
                            "public-decorated-get",
                            "decorated-get",
                            "static-get",
                            "public-static-get",
                            "instance-get",
                            "public-instance-get",
                            "abstract-get",
                            "public-abstract-get",
                            "protected-get",
                            "protected-decorated-get",
                            "protected-static-get",
                            "protected-instance-get",
                            "protected-abstract-get",
                            "private-get",
                            "private-decorated-get",
                            "private-static-get",
                            "private-instance-get",
                            "#private-get",
                            "#private-static-get",
                            "#private-instance-get",
                            "set",
                            "public-set",
                            "public-decorated-set",
                            "decorated-set",
                            "static-set",
                            "public-static-set",
                            "instance-set",
                            "public-instance-set",
                            "abstract-set",
                            "public-abstract-set",
                            "protected-set",
                            "protected-decorated-set",
                            "protected-static-set",
                            "protected-instance-set",
                            "protected-abstract-set",
                            "private-set",
                            "private-decorated-set",
                            "private-static-set",
                            "private-instance-set",
                            "#private-set",
                            "#private-static-set",
                            "#private-instance-set",
                            "static-initialization",
                            "static-static-initialization",
                            "public-static-static-initialization",
                            "instance-static-initialization",
                            "public-instance-static-initialization",
                            "abstract-static-initialization",
                            "public-abstract-static-initialization",
                            "protected-static-static-initialization",
                            "protected-instance-static-initialization",
                            "protected-abstract-static-initialization",
                            "private-static-static-initialization",
                            "private-instance-static-initialization",
                            "#private-static-static-initialization",
                            "#private-instance-static-initialization"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "memberTypes": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "enum": [
                                  "signature",
                                  "field",
                                  "public-field",
                                  "public-decorated-field",
                                  "decorated-field",
                                  "static-field",
                                  "public-static-field",
                                  "instance-field",
                                  "public-instance-field",
                                  "abstract-field",
                                  "public-abstract-field",
                                  "protected-field",
                                  "protected-decorated-field",
                                  "protected-static-field",
                                  "protected-instance-field",
                                  "protected-abstract-field",
                                  "private-field",
                                  "private-decorated-field",
                                  "private-static-field",
                                  "private-instance-field",
                                  "#private-field",
                                  "#private-static-field",
                                  "#private-instance-field",
                                  "method",
                                  "public-method",
                                  "public-decorated-method",
                                  "decorated-method",
                                  "static-method",
                                  "public-static-method",
                                  "instance-method",
                                  "public-instance-method",
                                  "abstract-method",
                                  "public-abstract-method",
                                  "protected-method",
                                  "protected-decorated-method",
                                  "protected-static-method",
                                  "protected-instance-method",
                                  "protected-abstract-method",
                                  "private-method",
                                  "private-decorated-method",
                                  "private-static-method",
                                  "private-instance-method",
                                  "#private-method",
                                  "#private-static-method",
                                  "#private-instance-method",
                                  "call-signature",
                                  "constructor",
                                  "public-constructor",
                                  "protected-constructor",
                                  "private-constructor",
                                  "get",
                                  "public-get",
                                  "public-decorated-get",
                                  "decorated-get",
                                  "static-get",
                                  "public-static-get",
                                  "instance-get",
                                  "public-instance-get",
                                  "abstract-get",
                                  "public-abstract-get",
                                  "protected-get",
                                  "protected-decorated-get",
                                  "protected-static-get",
                                  "protected-instance-get",
                                  "protected-abstract-get",
                                  "private-get",
                                  "private-decorated-get",
                                  "private-static-get",
                                  "private-instance-get",
                                  "#private-get",
                                  "#private-static-get",
                                  "#private-instance-get",
                                  "set",
                                  "public-set",
                                  "public-decorated-set",
                                  "decorated-set",
                                  "static-set",
                                  "public-static-set",
                                  "instance-set",
                                  "public-instance-set",
                                  "abstract-set",
                                  "public-abstract-set",
                                  "protected-set",
                                  "protected-decorated-set",
                                  "protected-static-set",
                                  "protected-instance-set",
                                  "protected-abstract-set",
                                  "private-set",
                                  "private-decorated-set",
                                  "private-static-set",
                                  "private-instance-set",
                                  "#private-set",
                                  "#private-static-set",
                                  "#private-instance-set",
                                  "static-initialization",
                                  "static-static-initialization",
                                  "public-static-static-initialization",
                                  "instance-static-initialization",
                                  "public-instance-static-initialization",
                                  "abstract-static-initialization",
                                  "public-abstract-static-initialization",
                                  "protected-static-static-initialization",
                                  "protected-instance-static-initialization",
                                  "protected-abstract-static-initialization",
                                  "private-static-static-initialization",
                                  "private-instance-static-initialization",
                                  "#private-static-static-initialization",
                                  "#private-instance-static-initialization"
                                ]
                              },
                              {
                                "type": "array",
                                "items": {
                                  "enum": [
                                    "signature",
                                    "field",
                                    "public-field",
                                    "public-decorated-field",
                                    "decorated-field",
                                    "static-field",
                                    "public-static-field",
                                    "instance-field",
                                    "public-instance-field",
                                    "abstract-field",
                                    "public-abstract-field",
                                    "protected-field",
                                    "protected-decorated-field",
                                    "protected-static-field",
                                    "protected-instance-field",
                                    "protected-abstract-field",
                                    "private-field",
                                    "private-decorated-field",
                                    "private-static-field",
                                    "private-instance-field",
                                    "#private-field",
                                    "#private-static-field",
                                    "#private-instance-field",
                                    "method",
                                    "public-method",
                                    "public-decorated-method",
                                    "decorated-method",
                                    "static-method",
                                    "public-static-method",
                                    "instance-method",
                                    "public-instance-method",
                                    "abstract-method",
                                    "public-abstract-method",
                                    "protected-method",
                                    "protected-decorated-method",
                                    "protected-static-method",
                                    "protected-instance-method",
                                    "protected-abstract-method",
                                    "private-method",
                                    "private-decorated-method",
                                    "private-static-method",
                                    "private-instance-method",
                                    "#private-method",
                                    "#private-static-method",
                                    "#private-instance-method",
                                    "call-signature",
                                    "constructor",
                                    "public-constructor",
                                    "protected-constructor",
                                    "private-constructor",
                                    "get",
                                    "public-get",
                                    "public-decorated-get",
                                    "decorated-get",
                                    "static-get",
                                    "public-static-get",
                                    "instance-get",
                                    "public-instance-get",
                                    "abstract-get",
                                    "public-abstract-get",
                                    "protected-get",
                                    "protected-decorated-get",
                                    "protected-static-get",
                                    "protected-instance-get",
                                    "protected-abstract-get",
                                    "private-get",
                                    "private-decorated-get",
                                    "private-static-get",
                                    "private-instance-get",
                                    "#private-get",
                                    "#private-static-get",
                                    "#private-instance-get",
                                    "set",
                                    "public-set",
                                    "public-decorated-set",
                                    "decorated-set",
                                    "static-set",
                                    "public-static-set",
                                    "instance-set",
                                    "public-instance-set",
                                    "abstract-set",
                                    "public-abstract-set",
                                    "protected-set",
                                    "protected-decorated-set",
                                    "protected-static-set",
                                    "protected-instance-set",
                                    "protected-abstract-set",
                                    "private-set",
                                    "private-decorated-set",
                                    "private-static-set",
                                    "private-instance-set",
                                    "#private-set",
                                    "#private-static-set",
                                    "#private-instance-set",
                                    "static-initialization",
                                    "static-static-initialization",
                                    "public-static-static-initialization",
                                    "instance-static-initialization",
                                    "public-instance-static-initialization",
                                    "abstract-static-initialization",
                                    "public-abstract-static-initialization",
                                    "protected-static-static-initialization",
                                    "protected-instance-static-initialization",
                                    "protected-abstract-static-initialization",
                                    "private-static-static-initialization",
                                    "private-instance-static-initialization",
                                    "#private-static-static-initialization",
                                    "#private-instance-static-initialization"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "string",
                          "enum": ["never"]
                        }
                      ]
                    },
                    "order": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "optionalityOrder": {
                      "type": "string",
                      "enum": ["optional-first", "required-first"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "interfaces": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": ["never"]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "enum": ["signature", "field", "method", "constructor"]
                      },
                      {
                        "type": "array",
                        "items": {
                          "enum": [
                            "signature",
                            "field",
                            "method",
                            "constructor"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "memberTypes": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "enum": [
                                  "signature",
                                  "field",
                                  "method",
                                  "constructor"
                                ]
                              },
                              {
                                "type": "array",
                                "items": {
                                  "enum": [
                                    "signature",
                                    "field",
                                    "method",
                                    "constructor"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "string",
                          "enum": ["never"]
                        }
                      ]
                    },
                    "order": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "optionalityOrder": {
                      "type": "string",
                      "enum": ["optional-first", "required-first"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            },
            "typeLiterals": {
              "oneOf": [
                {
                  "type": "string",
                  "enum": ["never"]
                },
                {
                  "type": "array",
                  "items": {
                    "oneOf": [
                      {
                        "enum": ["signature", "field", "method", "constructor"]
                      },
                      {
                        "type": "array",
                        "items": {
                          "enum": [
                            "signature",
                            "field",
                            "method",
                            "constructor"
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "type": "object",
                  "properties": {
                    "memberTypes": {
                      "oneOf": [
                        {
                          "type": "array",
                          "items": {
                            "oneOf": [
                              {
                                "enum": [
                                  "signature",
                                  "field",
                                  "method",
                                  "constructor"
                                ]
                              },
                              {
                                "type": "array",
                                "items": {
                                  "enum": [
                                    "signature",
                                    "field",
                                    "method",
                                    "constructor"
                                  ]
                                }
                              }
                            ]
                          }
                        },
                        {
                          "type": "string",
                          "enum": ["never"]
                        }
                      ]
                    },
                    "order": {
                      "type": "string",
                      "enum": [
                        "alphabetically",
                        "alphabetically-case-insensitive",
                        "as-written",
                        "natural",
                        "natural-case-insensitive"
                      ]
                    },
                    "optionalityOrder": {
                      "type": "string",
                      "enum": ["optional-first", "required-first"]
                    }
                  },
                  "additionalProperties": false
                }
              ]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "method-signature-style": {
    "defaultOptions": ["property"],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using a particular method signature syntax",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/method-signature-style"
      },
      "fixable": "code",
      "messages": {
        "errorMethod": "Shorthand method signature is forbidden. Use a function property instead.",
        "errorProperty": "Function property signature is forbidden. Use a method shorthand instead."
      },
      "schema": [
        {
          "enum": ["property", "method"]
        }
      ]
    }
  },
  "naming-convention": {
    "defaultOptions": [
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "variable",
        "format": ["camelCase", "UPPER_CASE"],
        "leadingUnderscore": "allow",
        "trailingUnderscore": "allow"
      },
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      }
    ],
    "meta": {
      "docs": {
        "description": "Enforce naming conventions for everything across a codebase",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/naming-convention"
      },
      "type": "suggestion",
      "messages": {
        "unexpectedUnderscore": "{{type}} name `{{name}}` must not have a {{position}} underscore.",
        "missingUnderscore": "{{type}} name `{{name}}` must have {{count}} {{position}} underscore(s).",
        "missingAffix": "{{type}} name `{{name}}` must have one of the following {{position}}es: {{affixes}}",
        "satisfyCustom": "{{type}} name `{{name}}` must {{regexMatch}} the RegExp: {{regex}}",
        "doesNotMatchFormat": "{{type}} name `{{name}}` must match one of the following formats: {{formats}}",
        "doesNotMatchFormatTrimmed": "{{type}} name `{{name}}` trimmed as `{{processedName}}` must match one of the following formats: {{formats}}"
      },
      "schema": {
        "type": "array",
        "items": {
          "oneOf": [
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "default",
                      "variableLike",
                      "memberLike",
                      "typeLike",
                      "method",
                      "property",
                      "variable",
                      "function",
                      "parameter",
                      "parameterProperty",
                      "accessor",
                      "enumMember",
                      "classMethod",
                      "objectLiteralMethod",
                      "typeMethod",
                      "classProperty",
                      "objectLiteralProperty",
                      "typeProperty",
                      "class",
                      "interface",
                      "typeAlias",
                      "enum",
                      "typeParameter"
                    ]
                  },
                  "additionalItems": false
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "const",
                      "readonly",
                      "static",
                      "public",
                      "protected",
                      "private",
                      "#private",
                      "abstract",
                      "destructured",
                      "global",
                      "exported",
                      "unused",
                      "requiresQuotes",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["default"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "const",
                      "readonly",
                      "static",
                      "public",
                      "protected",
                      "private",
                      "#private",
                      "abstract",
                      "destructured",
                      "global",
                      "exported",
                      "unused",
                      "requiresQuotes",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["variableLike"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["unused", "async"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["variable"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "const",
                      "destructured",
                      "exported",
                      "global",
                      "unused",
                      "async"
                    ]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["function"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["exported", "global", "unused", "async"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["parameter"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["destructured", "unused"]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["memberLike"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "#private",
                      "protected",
                      "public",
                      "readonly",
                      "requiresQuotes",
                      "static",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["classProperty"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "#private",
                      "protected",
                      "public",
                      "readonly",
                      "requiresQuotes",
                      "static",
                      "override"
                    ]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["objectLiteralProperty"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["public", "requiresQuotes"]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["typeProperty"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["public", "readonly", "requiresQuotes"]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["parameterProperty"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["private", "protected", "public", "readonly"]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["property"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "#private",
                      "protected",
                      "public",
                      "readonly",
                      "requiresQuotes",
                      "static",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["classMethod"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "#private",
                      "protected",
                      "public",
                      "requiresQuotes",
                      "static",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["objectLiteralMethod"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["public", "requiresQuotes", "async"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["typeMethod"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["public", "requiresQuotes"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["method"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "#private",
                      "protected",
                      "public",
                      "requiresQuotes",
                      "static",
                      "override",
                      "async"
                    ]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["accessor"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "abstract",
                      "private",
                      "protected",
                      "public",
                      "requiresQuotes",
                      "static",
                      "override"
                    ]
                  },
                  "additionalItems": false
                },
                "types": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["boolean", "string", "number", "function", "array"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["enumMember"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["requiresQuotes"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["typeLike"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["abstract", "exported", "unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["class"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["abstract", "exported", "unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["interface"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["exported", "unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["typeAlias"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["exported", "unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["enum"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["exported", "unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "format": {
                  "oneOf": [
                    {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "enum": [
                          "camelCase",
                          "strictCamelCase",
                          "PascalCase",
                          "StrictPascalCase",
                          "snake_case",
                          "UPPER_CASE"
                        ]
                      },
                      "additionalItems": false
                    },
                    {
                      "type": "null"
                    }
                  ]
                },
                "custom": {
                  "type": "object",
                  "properties": {
                    "match": {
                      "type": "boolean"
                    },
                    "regex": {
                      "type": "string"
                    }
                  },
                  "required": ["match", "regex"]
                },
                "leadingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "trailingUnderscore": {
                  "type": "string",
                  "enum": [
                    "forbid",
                    "allow",
                    "require",
                    "requireDouble",
                    "allowDouble",
                    "allowSingleOrDouble"
                  ]
                },
                "prefix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "suffix": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "minLength": 1
                  },
                  "additionalItems": false
                },
                "failureMessage": {
                  "type": "string"
                },
                "filter": {
                  "oneOf": [
                    {
                      "type": "string",
                      "minLength": 1
                    },
                    {
                      "type": "object",
                      "properties": {
                        "match": {
                          "type": "boolean"
                        },
                        "regex": {
                          "type": "string"
                        }
                      },
                      "required": ["match", "regex"]
                    }
                  ]
                },
                "selector": {
                  "type": "string",
                  "enum": ["typeParameter"]
                },
                "modifiers": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": ["unused"]
                  },
                  "additionalItems": false
                }
              },
              "required": ["selector", "format"],
              "additionalProperties": false
            }
          ]
        },
        "additionalItems": false
      }
    }
  },
  "no-array-constructor": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow generic `Array` constructors",
        "recommended": "error",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-array-constructor"
      },
      "fixable": "code",
      "messages": {
        "useLiteral": "The array literal notation [] is preferable."
      },
      "schema": []
    }
  },
  "no-base-to-string": {
    "defaultOptions": [
      {
        "ignoredTypeNames": ["Error", "RegExp", "URL", "URLSearchParams"]
      }
    ],
    "meta": {
      "docs": {
        "description": "Require `.toString()` to only be called on objects which provide useful information when stringified",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-base-to-string"
      },
      "messages": {
        "baseToString": "'{{name}}' {{certainty}} evaluate to '[object Object]' when stringified."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoredTypeNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "suggestion"
    }
  },
  "no-confusing-non-null-assertion": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertion in locations that may be confusing",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-confusing-non-null-assertion"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "confusingEqual": "Confusing combinations of non-null assertion and equal test like \"a! == b\", which looks very similar to not equal \"a !== b\".",
        "confusingAssign": "Confusing combinations of non-null assertion and equal test like \"a! = b\", which looks very similar to not equal \"a != b\".",
        "notNeedInEqualTest": "Unnecessary non-null assertion (!) in equal test.",
        "notNeedInAssign": "Unnecessary non-null assertion (!) in assignment left hand.",
        "wrapUpLeft": "Wrap up left hand to avoid putting non-null assertion \"!\" and \"=\" together."
      },
      "schema": []
    }
  },
  "no-confusing-void-expression": {
    "defaultOptions": [{}],
    "meta": {
      "docs": {
        "description": "Require expressions of type void to appear in statement position",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-confusing-void-expression"
      },
      "messages": {
        "invalidVoidExpr": "Placing a void expression inside another expression is forbidden. Move it to its own statement instead.",
        "invalidVoidExprWrapVoid": "Void expressions used inside another expression must be moved to its own statement or marked explicitly with the `void` operator.",
        "invalidVoidExprArrow": "Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.",
        "invalidVoidExprArrowWrapVoid": "Void expressions returned from an arrow function shorthand must be marked explicitly with the `void` operator.",
        "invalidVoidExprReturn": "Returning a void expression from a function is forbidden. Please move it before the `return` statement.",
        "invalidVoidExprReturnLast": "Returning a void expression from a function is forbidden. Please remove the `return` statement.",
        "invalidVoidExprReturnWrapVoid": "Void expressions returned from a function must be marked explicitly with the `void` operator.",
        "voidExprWrapVoid": "Mark with an explicit `void` operator."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreArrowShorthand": {
              "type": "boolean"
            },
            "ignoreVoidOperator": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "problem",
      "fixable": "code",
      "hasSuggestions": true
    }
  },
  "no-dupe-class-members": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate class members",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-dupe-class-members"
      },
      "schema": [],
      "messages": {
        "unexpected": "Duplicate name '{{name}}'."
      }
    }
  },
  "no-duplicate-enum-values": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate enum member values",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-duplicate-enum-values"
      },
      "hasSuggestions": false,
      "messages": {
        "duplicateValue": "Duplicate enum member value {{value}}."
      },
      "schema": []
    }
  },
  "no-duplicate-imports": {
    "defaultOptions": [
      {
        "includeExports": false
      }
    ],
    "meta": {
      "deprecated": true,
      "replacedBy": ["import/no-duplicates"],
      "type": "problem",
      "docs": {
        "description": "Disallow duplicate imports",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-duplicate-imports"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "includeExports": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "import": "'{{module}}' import is duplicated.",
        "importAs": "'{{module}}' import is duplicated as export.",
        "export": "'{{module}}' export is duplicated.",
        "exportAs": "'{{module}}' export is duplicated as import.",
        "importType": "{{module}} type import is duplicated.",
        "importTypeAs": "{{module}} type import is duplicated as type export.",
        "exportType": "{{module}} type export is duplicated.",
        "exportTypeAs": "{{module}} type export is duplicated as type import."
      }
    }
  },
  "no-dynamic-delete": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow using the `delete` operator on computed key expressions",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-dynamic-delete"
      },
      "fixable": "code",
      "messages": {
        "dynamicDelete": "Do not delete dynamically computed property keys."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-empty-function": {
    "defaultOptions": [
      {
        "allow": []
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow empty functions",
        "recommended": "error",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-empty-function"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allow": {
              "type": "array",
              "items": {
                "enum": [
                  "functions",
                  "arrowFunctions",
                  "generatorFunctions",
                  "methods",
                  "generatorMethods",
                  "getters",
                  "setters",
                  "constructors",
                  "private-constructors",
                  "protected-constructors",
                  "asyncFunctions",
                  "asyncMethods",
                  "decoratedFunctions",
                  "overrideMethods"
                ]
              },
              "uniqueItems": true
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unexpected": "Unexpected empty {{name}}."
      }
    }
  },
  "no-empty-interface": {
    "defaultOptions": [
      {
        "allowSingleExtends": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the declaration of empty interfaces",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-empty-interface"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "noEmpty": "An empty interface is equivalent to `{}`.",
        "noEmptyWithSuper": "An interface declaring no members is equivalent to its supertype."
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "allowSingleExtends": {
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "no-explicit-any": {
    "defaultOptions": [
      {
        "fixToUnknown": false,
        "ignoreRestArgs": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `any` type",
        "recommended": "warn",
        "url": "https://typescript-eslint.io/rules/no-explicit-any"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "unexpectedAny": "Unexpected any. Specify a different type.",
        "suggestUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.",
        "suggestNever": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "fixToUnknown": {
              "description": "Whether to enable auto-fixing in which the `any` type is converted to the `unknown` type.",
              "type": "boolean"
            },
            "ignoreRestArgs": {
              "description": "Whether to ignore rest parameter arrays.",
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "no-extra-non-null-assertion": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow extra non-null assertions",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-extra-non-null-assertion"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "noExtraNonNullAssertion": "Forbidden extra non-null assertion."
      }
    }
  },
  "no-extra-parens": {
    "defaultOptions": ["all"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Disallow unnecessary parentheses",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-extra-parens"
      },
      "fixable": "code",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["functions"]
              }
            ],
            "minItems": 0,
            "maxItems": 1
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["all"]
              },
              {
                "type": "object",
                "properties": {
                  "conditionalAssign": {
                    "type": "boolean"
                  },
                  "nestedBinaryExpressions": {
                    "type": "boolean"
                  },
                  "returnAssign": {
                    "type": "boolean"
                  },
                  "ignoreJSX": {
                    "enum": ["none", "all", "single-line", "multi-line"]
                  },
                  "enforceForArrowConditionals": {
                    "type": "boolean"
                  },
                  "enforceForSequenceExpressions": {
                    "type": "boolean"
                  },
                  "enforceForNewInMemberExpressions": {
                    "type": "boolean"
                  },
                  "enforceForFunctionPrototypeMethods": {
                    "type": "boolean"
                  },
                  "allowParensAfterCommentPattern": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "unexpected": "Unnecessary parentheses around expression."
      }
    }
  },
  "no-extra-semi": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unnecessary semicolons",
        "recommended": "error",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-extra-semi"
      },
      "fixable": "code",
      "schema": [],
      "messages": {
        "unexpected": "Unnecessary semicolon."
      }
    }
  },
  "no-extraneous-class": {
    "defaultOptions": [
      {
        "allowConstructorOnly": false,
        "allowEmpty": false,
        "allowStaticOnly": false,
        "allowWithDecorator": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow classes used as namespaces",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-extraneous-class"
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "allowConstructorOnly": {
              "description": "Whether to allow extraneous classes that contain only a constructor.",
              "type": "boolean"
            },
            "allowEmpty": {
              "description": "Whether to allow extraneous classes that have no body (i.e. are empty).",
              "type": "boolean"
            },
            "allowStaticOnly": {
              "description": "Whether to allow extraneous classes that only contain static members.",
              "type": "boolean"
            },
            "allowWithDecorator": {
              "description": "Whether to allow extraneous classes that include a decorator.",
              "type": "boolean"
            }
          }
        }
      ],
      "messages": {
        "empty": "Unexpected empty class.",
        "onlyStatic": "Unexpected class with only static properties.",
        "onlyConstructor": "Unexpected class with only a constructor."
      }
    }
  },
  "no-floating-promises": {
    "defaultOptions": [
      {
        "ignoreVoid": true,
        "ignoreIIFE": false
      }
    ],
    "meta": {
      "docs": {
        "description": "Require Promise-like statements to be handled appropriately",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-floating-promises"
      },
      "hasSuggestions": true,
      "messages": {
        "floating": "Promises must be awaited, end with a call to .catch, or end with a call to .then with a rejection handler.",
        "floatingFixAwait": "Add await operator.",
        "floatingVoid": "Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.",
        "floatingFixVoid": "Add void operator to ignore."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreVoid": {
              "description": "Whether to ignore `void` expressions.",
              "type": "boolean"
            },
            "ignoreIIFE": {
              "description": "Whether to ignore async IIFEs (Immediately Invocated Function Expressions).",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "problem"
    }
  },
  "no-for-in-array": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow iterating over an array with a for-in loop",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-for-in-array"
      },
      "messages": {
        "forInViolation": "For-in loops over arrays are forbidden. Use for-of or array.forEach instead."
      },
      "schema": [],
      "type": "problem"
    }
  },
  "no-implicit-any-catch": {
    "defaultOptions": [
      {
        "allowExplicitAny": false
      }
    ],
    "meta": {
      "deprecated": true,
      "type": "suggestion",
      "docs": {
        "description": "Disallow usage of the implicit `any` type in catch clauses",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-implicit-any-catch"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "implicitAnyInCatch": "Implicit any in catch clause.",
        "explicitAnyInCatch": "Explicit any in catch clause.",
        "suggestExplicitUnknown": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "allowExplicitAny": {
              "description": "Whether to disallow specifying `: any` as the error type as well. See also `no-explicit-any`.",
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "no-implied-eval": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow the use of `eval()`-like methods",
        "recommended": "error",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-implied-eval"
      },
      "messages": {
        "noImpliedEvalError": "Implied eval. Consider passing a function.",
        "noFunctionConstructor": "Implied eval. Do not use the Function constructor to create functions."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-import-type-side-effects": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce the use of top-level import type qualifier when an import only has specifiers with inline type qualifiers",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-import-type-side-effects"
      },
      "fixable": "code",
      "messages": {
        "useTopLevelQualifier": "TypeScript will only remove the inline type specifiers which will leave behind a side effect import at runtime. Convert this to a top-level type qualifier to properly remove the entire import."
      },
      "schema": []
    }
  },
  "no-inferrable-types": {
    "defaultOptions": [
      {
        "ignoreParameters": false,
        "ignoreProperties": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow explicit type declarations for variables or parameters initialized to a number, string, or boolean",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-inferrable-types"
      },
      "fixable": "code",
      "messages": {
        "noInferrableType": "Type {{type}} trivially inferred from a {{type}} literal, remove type annotation."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreParameters": {
              "type": "boolean"
            },
            "ignoreProperties": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-invalid-this": {
    "defaultOptions": [
      {
        "capIsConstructor": true
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow `this` keywords outside of classes or class-like objects",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-invalid-this"
      },
      "messages": {
        "unexpectedThis": "Unexpected 'this'."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "capIsConstructor": {
              "type": "boolean",
              "default": true
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-invalid-void-type": {
    "defaultOptions": [
      {
        "allowInGenericTypeArguments": true,
        "allowAsThisParameter": false
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow `void` type outside of generic or return types",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-invalid-void-type"
      },
      "messages": {
        "invalidVoidForGeneric": "{{ generic }} may not have void as a type argument.",
        "invalidVoidNotReturnOrGeneric": "void is only valid as a return type or generic type argument.",
        "invalidVoidNotReturn": "void is only valid as a return type.",
        "invalidVoidNotReturnOrThisParam": "void is only valid as return type or type of `this` parameter.",
        "invalidVoidNotReturnOrThisParamOrGeneric": "void is only valid as a return type or generic type argument or the type of a `this` parameter.",
        "invalidVoidUnionConstituent": "void is not valid as a constituent in a union type"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowInGenericTypeArguments": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "minLength": 1
                }
              ]
            },
            "allowAsThisParameter": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-loop-func": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow function declarations that contain unsafe references inside loop statements",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loop-func"
      },
      "schema": [],
      "messages": {
        "unsafeRefs": "Function declared in a loop contains unsafe references to variable(s) {{ varNames }}."
      }
    }
  },
  "no-loss-of-precision": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow literal numbers that lose precision",
        "recommended": "error",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-loss-of-precision"
      },
      "schema": [],
      "messages": {
        "noLossOfPrecision": "This number literal will lose precision at runtime."
      }
    }
  },
  "no-magic-numbers": {
    "defaultOptions": [
      {
        "ignore": [],
        "ignoreArrayIndexes": false,
        "enforceConst": false,
        "detectObjects": false,
        "ignoreNumericLiteralTypes": false,
        "ignoreEnums": false,
        "ignoreReadonlyClassProperties": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow magic numbers",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-magic-numbers"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "detectObjects": {
              "type": "boolean",
              "default": false
            },
            "enforceConst": {
              "type": "boolean",
              "default": false
            },
            "ignore": {
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "type": "number"
                  },
                  {
                    "type": "string",
                    "pattern": "^[+-]?(?:0|[1-9][0-9]*)n$"
                  }
                ]
              },
              "uniqueItems": true
            },
            "ignoreArrayIndexes": {
              "type": "boolean",
              "default": false
            },
            "ignoreDefaultValues": {
              "type": "boolean",
              "default": false
            },
            "ignoreClassFieldInitialValues": {
              "type": "boolean",
              "default": false
            },
            "ignoreNumericLiteralTypes": {
              "type": "boolean"
            },
            "ignoreEnums": {
              "type": "boolean"
            },
            "ignoreReadonlyClassProperties": {
              "type": "boolean"
            },
            "ignoreTypeIndexes": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "useConst": "Number constants declarations must use 'const'.",
        "noMagic": "No magic number: {{raw}}."
      }
    }
  },
  "no-meaningless-void-operator": {
    "defaultOptions": [
      {
        "checkNever": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow the `void` operator except when used to discard a value",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-meaningless-void-operator"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "meaninglessVoidOperator": "void operator shouldn't be used on {{type}}; it should convey that a return value is being ignored",
        "removeVoid": "Remove 'void'"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "checkNever": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-misused-new": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce valid definition of `new` and `constructor`",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-misused-new"
      },
      "schema": [],
      "messages": {
        "errorMessageInterface": "Interfaces cannot be constructed, only classes.",
        "errorMessageClass": "Class cannot have method named `new`."
      }
    }
  },
  "no-misused-promises": {
    "defaultOptions": [
      {
        "checksConditionals": true,
        "checksVoidReturn": true,
        "checksSpreads": true
      }
    ],
    "meta": {
      "docs": {
        "description": "Disallow Promises in places not designed to handle them",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-misused-promises"
      },
      "messages": {
        "voidReturnArgument": "Promise returned in function argument where a void return was expected.",
        "voidReturnVariable": "Promise-returning function provided to variable where a void return was expected.",
        "voidReturnProperty": "Promise-returning function provided to property where a void return was expected.",
        "voidReturnReturnValue": "Promise-returning function provided to return value where a void return was expected.",
        "voidReturnAttribute": "Promise-returning function provided to attribute where a void return was expected.",
        "conditional": "Expected non-Promise value in a boolean conditional.",
        "spread": "Expected a non-Promise value to be spreaded in an object."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "checksConditionals": {
              "type": "boolean"
            },
            "checksVoidReturn": {
              "oneOf": [
                {
                  "type": "boolean"
                },
                {
                  "additionalProperties": false,
                  "properties": {
                    "arguments": {
                      "type": "boolean"
                    },
                    "attributes": {
                      "type": "boolean"
                    },
                    "properties": {
                      "type": "boolean"
                    },
                    "returns": {
                      "type": "boolean"
                    },
                    "variables": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              ]
            },
            "checksSpreads": {
              "type": "boolean"
            }
          }
        }
      ],
      "type": "problem"
    }
  },
  "no-namespace": {
    "defaultOptions": [
      {
        "allowDeclarations": false,
        "allowDefinitionFiles": true
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow TypeScript namespaces",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-namespace"
      },
      "messages": {
        "moduleSyntaxIsPreferred": "ES2015 module syntax is preferred over namespaces."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowDeclarations": {
              "description": "Whether to allow `declare` with custom TypeScript namespaces.",
              "type": "boolean"
            },
            "allowDefinitionFiles": {
              "description": "Whether to allow `declare` with custom TypeScript namespaces inside definition files.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-non-null-asserted-nullish-coalescing": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions in the left operand of a nullish coalescing operator",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-nullish-coalescing"
      },
      "messages": {
        "noNonNullAssertedNullishCoalescing": "The nullish coalescing operator is designed to handle undefined and null - using a non-null assertion is not needed.",
        "suggestRemovingNonNull": "Remove the non-null assertion."
      },
      "schema": [],
      "hasSuggestions": true
    }
  },
  "no-non-null-asserted-optional-chain": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions after an optional chain expression",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-non-null-asserted-optional-chain"
      },
      "hasSuggestions": true,
      "messages": {
        "noNonNullOptionalChain": "Optional chain expressions can return undefined by design - using a non-null assertion is unsafe and wrong.",
        "suggestRemovingNonNull": "You should remove the non-null assertion."
      },
      "schema": []
    }
  },
  "no-non-null-assertion": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow non-null assertions using the `!` postfix operator",
        "recommended": "warn",
        "url": "https://typescript-eslint.io/rules/no-non-null-assertion"
      },
      "hasSuggestions": true,
      "messages": {
        "noNonNull": "Forbidden non-null assertion.",
        "suggestOptionalChain": "Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."
      },
      "schema": []
    }
  },
  "no-parameter-properties": {
    "defaultOptions": [
      {
        "allows": []
      }
    ],
    "meta": {
      "deprecated": true,
      "replacedBy": ["@typescript-eslint/parameter-properties"],
      "type": "problem",
      "docs": {
        "description": "Disallow the use of parameter properties in class constructors",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-parameter-properties"
      },
      "messages": {
        "noParamProp": "Property {{parameter}} cannot be declared in the constructor."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allows": {
              "type": "array",
              "items": {
                "enum": [
                  "readonly",
                  "private",
                  "protected",
                  "public",
                  "private readonly",
                  "protected readonly",
                  "public readonly"
                ]
              },
              "minItems": 1
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-redeclare": {
    "defaultOptions": [
      {
        "builtinGlobals": true,
        "ignoreDeclarationMerge": true
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable redeclaration",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-redeclare"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "builtinGlobals": {
              "type": "boolean"
            },
            "ignoreDeclarationMerge": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "redeclared": "'{{id}}' is already defined.",
        "redeclaredAsBuiltin": "'{{id}}' is already defined as a built-in global variable.",
        "redeclaredBySyntax": "'{{id}}' is already defined by a variable declaration."
      }
    }
  },
  "no-redundant-type-constituents": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow members of unions and intersections that do nothing or override type information",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-redundant-type-constituents"
      },
      "messages": {
        "literalOverridden": "{{literal}} is overridden by {{primitive}} in this union type.",
        "primitiveOverridden": "{{primitive}} is overridden by the {{literal}} in this intersection type.",
        "overridden": "'{{typeName}}' is overridden by other types in this {{container}} type.",
        "overrides": "'{{typeName}}' overrides all other types in this {{container}} type."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-require-imports": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow invocation of `require()`",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-require-imports"
      },
      "schema": [],
      "messages": {
        "noRequireImports": "A `require()` style import is forbidden."
      }
    }
  },
  "no-restricted-imports": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow specified modules when loaded by `import`",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-restricted-imports"
      },
      "messages": {
        "path": "'{{importSource}}' import is restricted from being used.",
        "pathWithCustomMessage": "'{{importSource}}' import is restricted from being used. {{customMessage}}",
        "patterns": "'{{importSource}}' import is restricted from being used by a pattern.",
        "patternWithCustomMessage": "'{{importSource}}' import is restricted from being used by a pattern. {{customMessage}}",
        "patternAndImportName": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern.",
        "patternAndImportNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
        "patternAndEverything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern.",
        "patternAndEverythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted from being used by a pattern. {{customMessage}}",
        "everything": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted.",
        "everythingWithCustomMessage": "* import is invalid because '{{importNames}}' from '{{importSource}}' is restricted. {{customMessage}}",
        "importName": "'{{importName}}' import from '{{importSource}}' is restricted.",
        "importNameWithCustomMessage": "'{{importName}}' import from '{{importSource}}' is restricted. {{customMessage}}"
      },
      "schema": {
        "anyOf": [
          {
            "items": {
              "anyOf": [
                {},
                {
                  "properties": {
                    "allowTypeImports": {
                      "type": "boolean",
                      "default": false
                    }
                  }
                }
              ]
            }
          },
          {
            "items": {
              "properties": {
                "paths": {
                  "items": {
                    "anyOf": [
                      {},
                      {
                        "properties": {
                          "allowTypeImports": {
                            "type": "boolean",
                            "default": false
                          }
                        }
                      }
                    ]
                  }
                },
                "patterns": {
                  "anyOf": [
                    {},
                    {
                      "items": {
                        "properties": {
                          "allowTypeImports": {
                            "type": "boolean",
                            "default": false
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        ]
      }
    }
  },
  "no-shadow": {
    "defaultOptions": [
      {
        "allow": [],
        "builtinGlobals": false,
        "hoist": "functions",
        "ignoreOnInitialization": false,
        "ignoreTypeValueShadow": true,
        "ignoreFunctionTypeParameterNameValueShadow": true
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow variable declarations from shadowing variables declared in the outer scope",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-shadow"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "builtinGlobals": {
              "type": "boolean"
            },
            "hoist": {
              "enum": ["all", "functions", "never"]
            },
            "allow": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ignoreOnInitialization": {
              "type": "boolean"
            },
            "ignoreTypeValueShadow": {
              "type": "boolean"
            },
            "ignoreFunctionTypeParameterNameValueShadow": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "noShadow": "'{{name}}' is already declared in the upper scope on line {{shadowedLine}} column {{shadowedColumn}}.",
        "noShadowGlobal": "'{{name}}' is already a global variable."
      }
    }
  },
  "no-this-alias": {
    "defaultOptions": [
      {
        "allowDestructuring": true,
        "allowedNames": []
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow aliasing `this`",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-this-alias"
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "allowDestructuring": {
              "description": "Whether to ignore destructurings, such as `const { props, state } = this`.",
              "type": "boolean"
            },
            "allowedNames": {
              "description": "Names to ignore, such as [\"self\"] for `const self = this;`.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "messages": {
        "thisAssignment": "Unexpected aliasing of 'this' to local variable.",
        "thisDestructure": "Unexpected aliasing of members of 'this' to local variables."
      }
    }
  },
  "no-throw-literal": {
    "defaultOptions": [
      {
        "allowThrowingAny": true,
        "allowThrowingUnknown": true
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow throwing literals as exceptions",
        "recommended": "strict",
        "extendsBaseRule": true,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-throw-literal"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowThrowingAny": {
              "type": "boolean"
            },
            "allowThrowingUnknown": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "object": "Expected an error object to be thrown.",
        "undef": "Do not throw undefined."
      }
    }
  },
  "no-type-alias": {
    "defaultOptions": [
      {
        "allowAliases": "never",
        "allowCallbacks": "never",
        "allowConditionalTypes": "never",
        "allowConstructors": "never",
        "allowLiterals": "never",
        "allowMappedTypes": "never",
        "allowTupleTypes": "never",
        "allowGenerics": "never"
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow type aliases",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-type-alias"
      },
      "messages": {
        "noTypeAlias": "Type {{alias}} are not allowed.",
        "noCompositionAlias": "{{typeName}} in {{compositionType}} types are not allowed."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowAliases": {
              "description": "Whether to allow direct one-to-one type aliases.",
              "enum": [
                "always",
                "never",
                "in-unions",
                "in-intersections",
                "in-unions-and-intersections"
              ]
            },
            "allowCallbacks": {
              "description": "Whether to allow type aliases for callbacks.",
              "enum": ["always", "never"]
            },
            "allowConditionalTypes": {
              "description": "Whether to allow type aliases for conditional types.",
              "enum": ["always", "never"]
            },
            "allowConstructors": {
              "description": "Whether to allow type aliases with constructors.",
              "enum": ["always", "never"]
            },
            "allowLiterals": {
              "description": "Whether to allow type aliases with object literal types.",
              "enum": [
                "always",
                "never",
                "in-unions",
                "in-intersections",
                "in-unions-and-intersections"
              ]
            },
            "allowMappedTypes": {
              "description": "Whether to allow type aliases with mapped types.",
              "enum": [
                "always",
                "never",
                "in-unions",
                "in-intersections",
                "in-unions-and-intersections"
              ]
            },
            "allowTupleTypes": {
              "description": "Whether to allow type aliases with tuple types.",
              "enum": [
                "always",
                "never",
                "in-unions",
                "in-intersections",
                "in-unions-and-intersections"
              ]
            },
            "allowGenerics": {
              "description": "Whether to allow type aliases with generic types.",
              "enum": ["always", "never"]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "no-unnecessary-boolean-literal-compare": {
    "defaultOptions": [
      {
        "allowComparingNullableBooleansToTrue": true,
        "allowComparingNullableBooleansToFalse": true
      }
    ],
    "meta": {
      "docs": {
        "description": "Disallow unnecessary equality comparisons against boolean literals",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-boolean-literal-compare"
      },
      "fixable": "code",
      "messages": {
        "direct": "This expression unnecessarily compares a boolean value to a boolean instead of using it directly.",
        "negated": "This expression unnecessarily compares a boolean value to a boolean instead of negating it.",
        "comparingNullableToTrueDirect": "This expression unnecessarily compares a nullable boolean value to true instead of using it directly.",
        "comparingNullableToTrueNegated": "This expression unnecessarily compares a nullable boolean value to true instead of negating it.",
        "comparingNullableToFalse": "This expression unnecessarily compares a nullable boolean value to false instead of using the ?? operator to provide a default."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowComparingNullableBooleansToTrue": {
              "description": "Whether to allow comparisons between nullable boolean variables and `true`.",
              "type": "boolean"
            },
            "allowComparingNullableBooleansToFalse": {
              "description": "Whether to allow comparisons between nullable boolean variables and `false`.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "suggestion"
    }
  },
  "no-unnecessary-condition": {
    "defaultOptions": [
      {
        "allowConstantLoopConditions": false,
        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow conditionals where the type is always truthy or always falsy",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-condition"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowConstantLoopConditions": {
              "description": "Whether to ignore constant loop conditions, such as `while (true)`.",
              "type": "boolean"
            },
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
              "description": "Whether to not error when running with a tsconfig that has strictNullChecks turned.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "fixable": "code",
      "messages": {
        "alwaysTruthy": "Unnecessary conditional, value is always truthy.",
        "alwaysFalsy": "Unnecessary conditional, value is always falsy.",
        "alwaysTruthyFunc": "This callback should return a conditional, but return is always truthy.",
        "alwaysFalsyFunc": "This callback should return a conditional, but return is always falsy.",
        "neverNullish": "Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.",
        "alwaysNullish": "Unnecessary conditional, left-hand side of `??` operator is always `null` or `undefined`.",
        "literalBooleanExpression": "Unnecessary conditional, both sides of the expression are literal values.",
        "noOverlapBooleanExpression": "Unnecessary conditional, the types have no overlap.",
        "never": "Unnecessary conditional, value is `never`.",
        "neverOptionalChain": "Unnecessary optional chain on a non-nullish value.",
        "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
      }
    }
  },
  "no-unnecessary-qualifier": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow unnecessary namespace qualifiers",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-qualifier"
      },
      "fixable": "code",
      "messages": {
        "unnecessaryQualifier": "Qualifier is unnecessary since '{{ name }}' is in scope."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-unnecessary-type-arguments": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow type arguments that are equal to the default",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-arguments"
      },
      "fixable": "code",
      "messages": {
        "unnecessaryTypeParameter": "This is the default value for this type parameter, so it can be omitted."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-unnecessary-type-assertion": {
    "defaultOptions": [{}],
    "meta": {
      "docs": {
        "description": "Disallow type assertions that do not change the type of an expression",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-assertion"
      },
      "fixable": "code",
      "messages": {
        "unnecessaryAssertion": "This assertion is unnecessary since it does not change the type of the expression.",
        "contextuallyUnnecessary": "This assertion is unnecessary since the receiver accepts the original type of the expression."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "typesToIgnore": {
              "description": "A list of type names to ignore.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "type": "suggestion"
    }
  },
  "no-unnecessary-type-constraint": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow unnecessary constraints on generic types",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-unnecessary-type-constraint"
      },
      "hasSuggestions": true,
      "messages": {
        "unnecessaryConstraint": "Constraining the generic type `{{name}}` to `{{constraint}}` does nothing and is unnecessary.",
        "removeUnnecessaryConstraint": "Remove the unnecessary `{{constraint}}` constraint."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-unsafe-argument": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a function with a value with type `any`",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-argument"
      },
      "messages": {
        "unsafeArgument": "Unsafe argument of type `{{sender}}` assigned to a parameter of type `{{receiver}}`.",
        "unsafeTupleSpread": "Unsafe spread of a tuple type. The argument is of type `{{sender}}` and is assigned to a parameter of type `{{receiver}}`.",
        "unsafeArraySpread": "Unsafe spread of an `any` array type.",
        "unsafeSpread": "Unsafe spread of an `any` type."
      },
      "schema": []
    }
  },
  "no-unsafe-assignment": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow assigning a value with type `any` to variables and properties",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-assignment"
      },
      "messages": {
        "anyAssignment": "Unsafe assignment of an `any` value.",
        "anyAssignmentThis": "Unsafe assignment of an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
        "unsafeArrayPattern": "Unsafe array destructuring of an `any` array value.",
        "unsafeArrayPatternFromTuple": "Unsafe array destructuring of a tuple element with an `any` value.",
        "unsafeAssignment": "Unsafe assignment of type {{sender}} to a variable of type {{receiver}}.",
        "unsafeArraySpread": "Unsafe spread of an `any` value in an array."
      },
      "schema": []
    }
  },
  "no-unsafe-call": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow calling a value with type `any`",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-call"
      },
      "messages": {
        "unsafeCall": "Unsafe call of an `any` typed value.",
        "unsafeCallThis": "Unsafe call of an `any` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
        "unsafeNew": "Unsafe construction of an any type value.",
        "unsafeTemplateTag": "Unsafe any typed template tag."
      },
      "schema": []
    }
  },
  "no-unsafe-declaration-merging": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow unsafe declaration merging",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/no-unsafe-declaration-merging"
      },
      "messages": {
        "unsafeMerging": "Unsafe declaration merging between classes and interfaces."
      },
      "schema": []
    }
  },
  "no-unsafe-member-access": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow member access on a value with type `any`",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-member-access"
      },
      "messages": {
        "unsafeMemberExpression": "Unsafe member access {{property}} on an `any` value.",
        "unsafeThisMemberExpression": "Unsafe member access {{property}} on an `any` value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
        "unsafeComputedMemberAccess": "Computed name {{property}} resolves to an any value."
      },
      "schema": []
    }
  },
  "no-unsafe-return": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow returning a value with type `any` from a function",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/no-unsafe-return"
      },
      "messages": {
        "unsafeReturn": "Unsafe return of an `{{type}}` typed value.",
        "unsafeReturnThis": "Unsafe return of an `{{type}}` typed value. `this` is typed as `any`.\nYou can try to fix this by turning on the `noImplicitThis` compiler option, or adding a `this` parameter to the function.",
        "unsafeReturnAssignment": "Unsafe return of type `{{sender}}` from function with return type `{{receiver}}`."
      },
      "schema": []
    }
  },
  "no-unused-expressions": {
    "defaultOptions": [
      {
        "allowShortCircuit": false,
        "allowTernary": false,
        "allowTaggedTemplates": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow unused expressions",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-unused-expressions"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowShortCircuit": {
              "type": "boolean",
              "default": false
            },
            "allowTernary": {
              "type": "boolean",
              "default": false
            },
            "allowTaggedTemplates": {
              "type": "boolean",
              "default": false
            },
            "enforceForJSX": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "unusedExpression": "Expected an assignment or function call and instead saw an expression."
      }
    }
  },
  "no-unused-vars": {
    "defaultOptions": [{}],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow unused variables",
        "recommended": "warn",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-unused-vars"
      },
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["all", "local"]
            },
            {
              "type": "object",
              "properties": {
                "vars": {
                  "enum": ["all", "local"]
                },
                "varsIgnorePattern": {
                  "type": "string"
                },
                "args": {
                  "enum": ["all", "after-used", "none"]
                },
                "ignoreRestSiblings": {
                  "type": "boolean"
                },
                "argsIgnorePattern": {
                  "type": "string"
                },
                "caughtErrors": {
                  "enum": ["all", "none"]
                },
                "caughtErrorsIgnorePattern": {
                  "type": "string"
                },
                "destructuredArrayIgnorePattern": {
                  "type": "string"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "unusedVar": "'{{varName}}' is {{action}} but never used{{additional}}."
      }
    }
  },
  "no-use-before-define": {
    "defaultOptions": [
      {
        "functions": true,
        "classes": true,
        "enums": true,
        "variables": true,
        "typedefs": true,
        "ignoreTypeReferences": true,
        "allowNamedExports": false
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow the use of variables before they are defined",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-use-before-define"
      },
      "messages": {
        "noUseBeforeDefine": "'{{name}}' was used before it was defined."
      },
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["nofunc"]
            },
            {
              "type": "object",
              "properties": {
                "functions": {
                  "type": "boolean"
                },
                "classes": {
                  "type": "boolean"
                },
                "enums": {
                  "type": "boolean"
                },
                "variables": {
                  "type": "boolean"
                },
                "typedefs": {
                  "type": "boolean"
                },
                "ignoreTypeReferences": {
                  "type": "boolean"
                },
                "allowNamedExports": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ]
    }
  },
  "no-useless-constructor": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow unnecessary constructors",
        "recommended": "strict",
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/no-useless-constructor"
      },
      "schema": [],
      "messages": {
        "noUselessConstructor": "Useless constructor."
      }
    }
  },
  "no-useless-empty-export": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Disallow empty exports that don't change anything in a module file",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/no-useless-empty-export"
      },
      "fixable": "code",
      "hasSuggestions": false,
      "messages": {
        "uselessExport": "Empty export does nothing and can be removed."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "no-var-requires": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Disallow `require` statements except in import statements",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/no-var-requires"
      },
      "messages": {
        "noVarReqs": "Require statement not part of import statement."
      },
      "schema": []
    }
  },
  "non-nullable-type-assertion-style": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Enforce non-null assertions over explicit type casts",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/non-nullable-type-assertion-style"
      },
      "fixable": "code",
      "messages": {
        "preferNonNullAssertion": "Use a ! assertion to more succinctly remove null and undefined from the type."
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "object-curly-spacing": {
    "defaultOptions": ["never"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing inside braces",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/object-curly-spacing"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "enum": ["always", "never"]
        },
        {
          "type": "object",
          "properties": {
            "arraysInObjects": {
              "type": "boolean"
            },
            "objectsInObjects": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "requireSpaceBefore": "A space is required before '{{token}}'.",
        "requireSpaceAfter": "A space is required after '{{token}}'.",
        "unexpectedSpaceBefore": "There should be no space before '{{token}}'.",
        "unexpectedSpaceAfter": "There should be no space after '{{token}}'."
      }
    }
  },
  "padding-line-between-statements": {
    "defaultOptions": [],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow padding lines between statements",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/padding-line-between-statements"
      },
      "fixable": "whitespace",
      "hasSuggestions": false,
      "schema": {
        "$defs": {
          "paddingType": {
            "enum": ["any", "never", "always"]
          },
          "statementType": {
            "anyOf": [
              {
                "enum": [
                  "*",
                  "block-like",
                  "exports",
                  "require",
                  "directive",
                  "expression",
                  "iife",
                  "multiline-block-like",
                  "multiline-expression",
                  "multiline-const",
                  "multiline-let",
                  "multiline-var",
                  "singleline-const",
                  "singleline-let",
                  "singleline-var",
                  "block",
                  "empty",
                  "function",
                  "break",
                  "case",
                  "class",
                  "const",
                  "continue",
                  "debugger",
                  "default",
                  "do",
                  "export",
                  "for",
                  "if",
                  "import",
                  "let",
                  "return",
                  "switch",
                  "throw",
                  "try",
                  "var",
                  "while",
                  "with",
                  "interface",
                  "type"
                ]
              },
              {
                "type": "array",
                "items": {
                  "enum": [
                    "*",
                    "block-like",
                    "exports",
                    "require",
                    "directive",
                    "expression",
                    "iife",
                    "multiline-block-like",
                    "multiline-expression",
                    "multiline-const",
                    "multiline-let",
                    "multiline-var",
                    "singleline-const",
                    "singleline-let",
                    "singleline-var",
                    "block",
                    "empty",
                    "function",
                    "break",
                    "case",
                    "class",
                    "const",
                    "continue",
                    "debugger",
                    "default",
                    "do",
                    "export",
                    "for",
                    "if",
                    "import",
                    "let",
                    "return",
                    "switch",
                    "throw",
                    "try",
                    "var",
                    "while",
                    "with",
                    "interface",
                    "type"
                  ]
                },
                "minItems": 1,
                "uniqueItems": true,
                "additionalItems": false
              }
            ]
          }
        },
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "blankLine": {
              "$ref": "#/$defs/paddingType"
            },
            "prev": {
              "$ref": "#/$defs/statementType"
            },
            "next": {
              "$ref": "#/$defs/statementType"
            }
          },
          "additionalProperties": false,
          "required": ["blankLine", "prev", "next"]
        },
        "additionalItems": false
      },
      "messages": {
        "unexpectedBlankLine": "Unexpected blank line before this statement.",
        "expectedBlankLine": "Expected blank line before this statement."
      }
    }
  },
  "parameter-properties": {
    "defaultOptions": [
      {
        "allow": [],
        "prefer": "class-property"
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Require or disallow parameter properties in class constructors",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/parameter-properties"
      },
      "messages": {
        "preferClassProperty": "Property {{parameter}} should be declared as a class property.",
        "preferParameterProperty": "Property {{parameter}} should be declared as a parameter property."
      },
      "schema": {
        "$defs": {
          "modifier": {
            "enum": [
              "readonly",
              "private",
              "protected",
              "public",
              "private readonly",
              "protected readonly",
              "public readonly"
            ]
          }
        },
        "prefixItems": [
          {
            "type": "object",
            "properties": {
              "allow": {
                "type": "array",
                "items": {
                  "$ref": "#/$defs/modifier"
                },
                "minItems": 1
              },
              "prefer": {
                "enum": ["class-property", "parameter-property"]
              }
            },
            "additionalProperties": false
          }
        ],
        "type": "array"
      }
    }
  },
  "prefer-as-const": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `as const` over literal type",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/prefer-as-const"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "preferConstAssertion": "Expected a `const` instead of a literal type assertion.",
        "variableConstAssertion": "Expected a `const` assertion instead of a literal type annotation.",
        "variableSuggest": "You should use `as const` instead of type annotation."
      },
      "schema": []
    }
  },
  "prefer-enum-initializers": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require each enum member value to be explicitly initialized",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/prefer-enum-initializers"
      },
      "hasSuggestions": true,
      "messages": {
        "defineInitializer": "The value of the member '{{ name }}' should be explicitly defined.",
        "defineInitializerSuggestion": "Can be fixed to {{ name }} = {{ suggested }}"
      },
      "schema": []
    }
  },
  "prefer-for-of": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce the use of `for-of` loop over the standard `for` loop where possible",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/prefer-for-of"
      },
      "messages": {
        "preferForOf": "Expected a `for-of` loop instead of a `for` loop with this simple iteration."
      },
      "schema": []
    }
  },
  "prefer-function-type": {
    "defaultOptions": [],
    "meta": {
      "docs": {
        "description": "Enforce using function types instead of interfaces with call signatures",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/prefer-function-type"
      },
      "fixable": "code",
      "messages": {
        "functionTypeOverCallableType": "{{ literalOrInterface }} only has a call signature, you should use a function type instead.",
        "unexpectedThisOnFunctionOnlyInterface": "`this` refers to the function type '{{ interfaceName }}', did you intend to use a generic `this` parameter like `<Self>(this: Self, ...) => Self` instead?"
      },
      "schema": [],
      "type": "suggestion"
    }
  },
  "prefer-includes": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce `includes` method over `indexOf` method",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-includes"
      },
      "fixable": "code",
      "messages": {
        "preferIncludes": "Use 'includes()' method instead.",
        "preferStringIncludes": "Use `String#includes()` method with a string instead."
      },
      "schema": []
    }
  },
  "prefer-literal-enum-member": {
    "defaultOptions": [
      {
        "allowBitwiseExpressions": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require all enum members to be literal values",
        "recommended": "strict",
        "requiresTypeChecking": false,
        "url": "https://typescript-eslint.io/rules/prefer-literal-enum-member"
      },
      "messages": {
        "notLiteral": "Explicit enum value must only be a literal value (string, number, boolean, etc)."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowBitwiseExpressions": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "prefer-namespace-keyword": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require using `namespace` keyword over `module` keyword to declare custom TypeScript modules",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/prefer-namespace-keyword"
      },
      "fixable": "code",
      "messages": {
        "useNamespace": "Use 'namespace' instead of 'module' to declare custom TypeScript modules."
      },
      "schema": []
    }
  },
  "prefer-nullish-coalescing": {
    "defaultOptions": [
      {
        "ignoreConditionalTests": true,
        "ignoreTernaryTests": true,
        "ignoreMixedLogicalExpressions": true,
        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using the nullish coalescing operator instead of logical chaining",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-nullish-coalescing"
      },
      "hasSuggestions": true,
      "messages": {
        "preferNullishOverOr": "Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.",
        "preferNullishOverTernary": "Prefer using nullish coalescing operator (`??`) instead of a ternary expression, as it is simpler to read.",
        "suggestNullish": "Fix to nullish coalescing operator (`??`).",
        "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreConditionalTests": {
              "type": "boolean"
            },
            "ignoreTernaryTests": {
              "type": "boolean"
            },
            "ignoreMixedLogicalExpressions": {
              "type": "boolean"
            },
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "prefer-optional-chain": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using concise optional chain expressions instead of chained logical ands, negated logical ors, or empty objects",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/prefer-optional-chain"
      },
      "hasSuggestions": true,
      "messages": {
        "preferOptionalChain": "Prefer using an optional chain expression instead, as it's more concise and easier to read.",
        "optionalChainSuggest": "Change to an optional chain."
      },
      "schema": []
    }
  },
  "prefer-readonly": {
    "defaultOptions": [
      {
        "onlyInlineLambdas": false
      }
    ],
    "meta": {
      "docs": {
        "description": "Require private members to be marked as `readonly` if they're never modified outside of the constructor",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly"
      },
      "fixable": "code",
      "messages": {
        "preferReadonly": "Member '{{name}}' is never reassigned; mark it as `readonly`."
      },
      "schema": [
        {
          "allowAdditionalProperties": false,
          "properties": {
            "onlyInlineLambdas": {
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ],
      "type": "suggestion"
    }
  },
  "prefer-readonly-parameter-types": {
    "defaultOptions": [
      {
        "checkParameterProperties": true,
        "ignoreInferredTypes": false,
        "treatMethodsAsReadonly": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require function parameters to be typed as `readonly` to prevent accidental mutation of inputs",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-readonly-parameter-types"
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "checkParameterProperties": {
              "type": "boolean"
            },
            "ignoreInferredTypes": {
              "type": "boolean"
            },
            "treatMethodsAsReadonly": {
              "type": "boolean"
            }
          }
        }
      ],
      "messages": {
        "shouldBeReadonly": "Parameter should be a read only type."
      }
    }
  },
  "prefer-reduce-type-parameter": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce using type parameter when calling `Array#reduce` instead of casting",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-reduce-type-parameter"
      },
      "messages": {
        "preferTypeParameter": "Unnecessary cast: Array#reduce accepts a type parameter for the default value."
      },
      "fixable": "code",
      "schema": []
    }
  },
  "prefer-regexp-exec": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "fixable": "code",
      "docs": {
        "description": "Enforce `RegExp#exec` over `String#match` if no global flag is provided",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-regexp-exec"
      },
      "messages": {
        "regExpExecOverStringMatch": "Use the `RegExp#exec()` method instead."
      },
      "schema": []
    }
  },
  "prefer-return-this-type": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce that `this` is used when only `this` type is returned",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-return-this-type"
      },
      "messages": {
        "useThisType": "Use `this` type instead."
      },
      "schema": [],
      "fixable": "code"
    }
  },
  "prefer-string-starts-ends-with": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce using `String#startsWith` and `String#endsWith` over other equivalent methods of checking substrings",
        "recommended": "strict",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/prefer-string-starts-ends-with"
      },
      "messages": {
        "preferStartsWith": "Use 'String#startsWith' method instead.",
        "preferEndsWith": "Use the 'String#endsWith' method instead."
      },
      "schema": [],
      "fixable": "code"
    }
  },
  "prefer-ts-expect-error": {
    "defaultOptions": [],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce using `@ts-expect-error` over `@ts-ignore`",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/prefer-ts-expect-error"
      },
      "fixable": "code",
      "messages": {
        "preferExpectErrorComment": "Use \"@ts-expect-error\" to ensure an error is actually being suppressed."
      },
      "schema": []
    }
  },
  "promise-function-async": {
    "defaultOptions": [
      {
        "allowAny": true,
        "allowedPromiseNames": [],
        "checkArrowFunctions": true,
        "checkFunctionDeclarations": true,
        "checkFunctionExpressions": true,
        "checkMethodDeclarations": true
      }
    ],
    "meta": {
      "type": "suggestion",
      "fixable": "code",
      "docs": {
        "description": "Require any function or method that returns a Promise to be marked async",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/promise-function-async"
      },
      "messages": {
        "missingAsync": "Functions that return promises must be async."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowAny": {
              "description": "Whether to consider `any` and `unknown` to be Promises.",
              "type": "boolean"
            },
            "allowedPromiseNames": {
              "description": "Any extra names of classes or interfaces to be considered Promises.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "checkArrowFunctions": {
              "type": "boolean"
            },
            "checkFunctionDeclarations": {
              "type": "boolean"
            },
            "checkFunctionExpressions": {
              "type": "boolean"
            },
            "checkMethodDeclarations": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "quotes": {
    "defaultOptions": [
      "double",
      {
        "allowTemplateLiterals": false,
        "avoidEscape": false
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce the consistent use of either backticks, double, or single quotes",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/quotes"
      },
      "fixable": "code",
      "messages": {
        "wrongQuotes": "Strings must use {{description}}."
      },
      "schema": [
        {
          "enum": ["single", "double", "backtick"]
        },
        {
          "anyOf": [
            {
              "enum": ["avoid-escape"]
            },
            {
              "type": "object",
              "properties": {
                "avoidEscape": {
                  "type": "boolean"
                },
                "allowTemplateLiterals": {
                  "type": "boolean"
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ]
    }
  },
  "require-array-sort-compare": {
    "defaultOptions": [
      {
        "ignoreStringArrays": false
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Require `Array#sort` calls to always provide a `compareFunction`",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/require-array-sort-compare"
      },
      "messages": {
        "requireCompare": "Require 'compare' argument."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreStringArrays": {
              "description": "Whether to ignore arrays in which all elements are strings.",
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "require-await": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow async functions which have no `await` expression",
        "recommended": "error",
        "requiresTypeChecking": true,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/require-await"
      },
      "schema": [],
      "messages": {
        "missingAwait": "{{name}} has no 'await' expression."
      }
    }
  },
  "restrict-plus-operands": {
    "defaultOptions": [
      {
        "checkCompoundAssignments": false,
        "allowAny": false
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Require both operands of addition to be the same type and be `bigint`, `number`, or `string`",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-plus-operands"
      },
      "messages": {
        "notNumbers": "Operands of '+' operation must either be both strings or both numbers.",
        "notStrings": "Operands of '+' operation must either be both strings or both numbers. Consider using a template literal.",
        "notBigInts": "Operands of '+' operation must be both bigints.",
        "notValidAnys": "Operands of '+' operation with any is possible only with string, number, bigint or any",
        "notValidTypes": "Operands of '+' operation must either be one of string, number, bigint or any (if allowed by option)"
      },
      "schema": [
        {
          "type": "object",
          "additionalProperties": false,
          "properties": {
            "checkCompoundAssignments": {
              "description": "Whether to check compound assignments such as `+=`.",
              "type": "boolean"
            },
            "allowAny": {
              "description": "Whether to allow `any` typed values.",
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "restrict-template-expressions": {
    "defaultOptions": [
      {
        "allowNumber": true
      }
    ],
    "meta": {
      "type": "problem",
      "docs": {
        "description": "Enforce template literal expressions to be of `string` type",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/restrict-template-expressions"
      },
      "messages": {
        "invalidType": "Invalid type \"{{type}}\" of template literal expression."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowNumber": {
              "description": "Whether to allow `number` typed values in template expressions.",
              "type": "boolean"
            },
            "allowBoolean": {
              "description": "Whether to allow `boolean` typed values in template expressions.",
              "type": "boolean"
            },
            "allowAny": {
              "description": "Whether to allow `any` typed values in template expressions.",
              "type": "boolean"
            },
            "allowNullish": {
              "description": "Whether to allow `nullish` typed values in template expressions.",
              "type": "boolean"
            },
            "allowRegExp": {
              "description": "Whether to allow `regexp` typed values in template expressions.",
              "type": "boolean"
            }
          }
        }
      ]
    }
  },
  "return-await": {
    "defaultOptions": ["in-try-catch"],
    "meta": {
      "docs": {
        "description": "Enforce consistent returning of awaited values",
        "recommended": false,
        "requiresTypeChecking": true,
        "extendsBaseRule": "no-return-await",
        "url": "https://typescript-eslint.io/rules/return-await"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "type": "problem",
      "messages": {
        "nonPromiseAwait": "Returning an awaited value that is not a promise is not allowed.",
        "disallowedPromiseAwait": "Returning an awaited promise is not allowed in this context.",
        "requiredPromiseAwait": "Returning an awaited promise is required in this context."
      },
      "schema": [
        {
          "enum": ["in-try-catch", "always", "never"]
        }
      ]
    }
  },
  "semi": {
    "defaultOptions": [
      "always",
      {
        "omitLastInOneLineBlock": false,
        "beforeStatementContinuationChars": "any"
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require or disallow semicolons instead of ASI",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/semi"
      },
      "fixable": "code",
      "schema": {
        "anyOf": [
          {
            "type": "array",
            "items": [
              {
                "enum": ["never"]
              },
              {
                "type": "object",
                "properties": {
                  "beforeStatementContinuationChars": {
                    "enum": ["always", "any", "never"]
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          },
          {
            "type": "array",
            "items": [
              {
                "enum": ["always"]
              },
              {
                "type": "object",
                "properties": {
                  "omitLastInOneLineBlock": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            ],
            "minItems": 0,
            "maxItems": 2
          }
        ]
      },
      "messages": {
        "missingSemi": "Missing semicolon.",
        "extraSemi": "Extra semicolon."
      }
    }
  },
  "sort-type-constituents": {
    "defaultOptions": [
      {
        "checkIntersections": true,
        "checkUnions": true,
        "groupOrder": [
          "named",
          "keyword",
          "operator",
          "literal",
          "function",
          "import",
          "conditional",
          "object",
          "tuple",
          "intersection",
          "union",
          "nullish"
        ]
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Enforce constituents of a type union/intersection to be sorted alphabetically",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/sort-type-constituents"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "notSorted": "{{type}} type constituents must be sorted.",
        "notSortedNamed": "{{type}} type {{name}} constituents must be sorted.",
        "suggestFix": "Sort constituents of type (removes all comments)."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "checkIntersections": {
              "description": "Whether to check intersection types.",
              "type": "boolean"
            },
            "checkUnions": {
              "description": "Whether to check union types.",
              "type": "boolean"
            },
            "groupOrder": {
              "description": "Ordering of the groups.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "conditional",
                  "function",
                  "import",
                  "intersection",
                  "keyword",
                  "nullish",
                  "literal",
                  "named",
                  "object",
                  "operator",
                  "tuple",
                  "union"
                ]
              }
            }
          }
        }
      ]
    }
  },
  "sort-type-union-intersection-members": {
    "defaultOptions": [
      {
        "checkIntersections": true,
        "checkUnions": true,
        "groupOrder": [
          "named",
          "keyword",
          "operator",
          "literal",
          "function",
          "import",
          "conditional",
          "object",
          "tuple",
          "intersection",
          "union",
          "nullish"
        ]
      }
    ],
    "meta": {
      "deprecated": true,
      "type": "suggestion",
      "docs": {
        "description": "Enforce members of a type union/intersection to be sorted alphabetically",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/sort-type-union-intersection-members"
      },
      "fixable": "code",
      "hasSuggestions": true,
      "messages": {
        "notSorted": "{{type}} type members must be sorted.",
        "notSortedNamed": "{{type}} type {{name}} members must be sorted.",
        "suggestFix": "Sort members of type (removes all comments)."
      },
      "replacedBy": ["@typescript-eslint/sort-type-constituents"],
      "schema": [
        {
          "type": "object",
          "properties": {
            "checkIntersections": {
              "description": "Whether to check intersection types.",
              "type": "boolean"
            },
            "checkUnions": {
              "description": "Whether to check union types.",
              "type": "boolean"
            },
            "groupOrder": {
              "description": "Ordering of the groups.",
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "conditional",
                  "function",
                  "import",
                  "intersection",
                  "keyword",
                  "nullish",
                  "literal",
                  "named",
                  "object",
                  "operator",
                  "tuple",
                  "union"
                ]
              }
            }
          }
        }
      ]
    }
  },
  "space-before-blocks": {
    "defaultOptions": ["always"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before blocks",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-before-blocks"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["always", "never"]
            },
            {
              "type": "object",
              "properties": {
                "keywords": {
                  "enum": ["always", "never", "off"]
                },
                "functions": {
                  "enum": ["always", "never", "off"]
                },
                "classes": {
                  "enum": ["always", "never", "off"]
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "unexpectedSpace": "Unexpected space before opening brace.",
        "missingSpace": "Missing space before opening brace."
      }
    }
  },
  "space-before-function-paren": {
    "defaultOptions": ["always"],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Enforce consistent spacing before function parenthesis",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-before-function-paren"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "oneOf": [
            {
              "enum": ["always", "never"]
            },
            {
              "type": "object",
              "properties": {
                "anonymous": {
                  "enum": ["always", "never", "ignore"]
                },
                "named": {
                  "enum": ["always", "never", "ignore"]
                },
                "asyncArrow": {
                  "enum": ["always", "never", "ignore"]
                }
              },
              "additionalProperties": false
            }
          ]
        }
      ],
      "messages": {
        "unexpected": "Unexpected space before function parentheses.",
        "missing": "Missing space before function parentheses."
      }
    }
  },
  "space-infix-ops": {
    "defaultOptions": [
      {
        "int32Hint": false
      }
    ],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require spacing around infix operators",
        "recommended": false,
        "extendsBaseRule": true,
        "url": "https://typescript-eslint.io/rules/space-infix-ops"
      },
      "fixable": "whitespace",
      "schema": [
        {
          "type": "object",
          "properties": {
            "int32Hint": {
              "type": "boolean",
              "default": false
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "missingSpace": "Operator '{{operator}}' must be spaced."
      }
    }
  },
  "strict-boolean-expressions": {
    "defaultOptions": [
      {
        "allowString": true,
        "allowNumber": true,
        "allowNullableObject": true,
        "allowNullableBoolean": false,
        "allowNullableString": false,
        "allowNullableNumber": false,
        "allowNullableEnum": true,
        "allowAny": false,
        "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": false
      }
    ],
    "meta": {
      "type": "suggestion",
      "fixable": "code",
      "hasSuggestions": true,
      "docs": {
        "description": "Disallow certain types in boolean expressions",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/strict-boolean-expressions"
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "allowString": {
              "type": "boolean"
            },
            "allowNumber": {
              "type": "boolean"
            },
            "allowNullableObject": {
              "type": "boolean"
            },
            "allowNullableBoolean": {
              "type": "boolean"
            },
            "allowNullableString": {
              "type": "boolean"
            },
            "allowNullableNumber": {
              "type": "boolean"
            },
            "allowNullableEnum": {
              "type": "boolean"
            },
            "allowAny": {
              "type": "boolean"
            },
            "allowRuleToRunWithoutStrictNullChecksIKnowWhatIAmDoing": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "messages": {
        "conditionErrorOther": "Unexpected value in conditional. A boolean expression is required.",
        "conditionErrorAny": "Unexpected any value in conditional. An explicit comparison or type cast is required.",
        "conditionErrorNullish": "Unexpected nullish value in conditional. The condition is always false.",
        "conditionErrorNullableBoolean": "Unexpected nullable boolean value in conditional. Please handle the nullish case explicitly.",
        "conditionErrorString": "Unexpected string value in conditional. An explicit empty string check is required.",
        "conditionErrorNullableString": "Unexpected nullable string value in conditional. Please handle the nullish/empty cases explicitly.",
        "conditionErrorNumber": "Unexpected number value in conditional. An explicit zero/NaN check is required.",
        "conditionErrorNullableNumber": "Unexpected nullable number value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
        "conditionErrorObject": "Unexpected object value in conditional. The condition is always true.",
        "conditionErrorNullableObject": "Unexpected nullable object value in conditional. An explicit null check is required.",
        "conditionErrorNullableEnum": "Unexpected nullable enum value in conditional. Please handle the nullish/zero/NaN cases explicitly.",
        "noStrictNullCheck": "This rule requires the `strictNullChecks` compiler option to be turned on to function correctly.",
        "conditionFixDefaultFalse": "Explicitly treat nullish value the same as false (`value ?? false`)",
        "conditionFixDefaultEmptyString": "Explicitly treat nullish value the same as an empty string (`value ?? \"\"`)",
        "conditionFixDefaultZero": "Explicitly treat nullish value the same as 0 (`value ?? 0`)",
        "conditionFixCompareNullish": "Change condition to check for null/undefined (`value != null`)",
        "conditionFixCastBoolean": "Explicitly cast value to a boolean (`Boolean(value)`)",
        "conditionFixCompareTrue": "Change condition to check if true (`value === true`)",
        "conditionFixCompareFalse": "Change condition to check if false (`value === false`)",
        "conditionFixCompareStringLength": "Change condition to check string's length (`value.length !== 0`)",
        "conditionFixCompareEmptyString": "Change condition to check for empty string (`value !== \"\"`)",
        "conditionFixCompareZero": "Change condition to check for 0 (`value !== 0`)",
        "conditionFixCompareNaN": "Change condition to check for NaN (`!Number.isNaN(value)`)"
      }
    }
  },
  "switch-exhaustiveness-check": {
    "defaultOptions": [],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Require switch-case statements to be exhaustive with union type",
        "recommended": false,
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/switch-exhaustiveness-check"
      },
      "hasSuggestions": true,
      "schema": [],
      "messages": {
        "switchIsNotExhaustive": "Switch is not exhaustive. Cases not matched: {{missingBranches}}",
        "addMissingCases": "Add branches for missing cases."
      }
    }
  },
  "triple-slash-reference": {
    "defaultOptions": [
      {
        "lib": "always",
        "path": "never",
        "types": "prefer-import"
      }
    ],
    "meta": {
      "type": "suggestion",
      "docs": {
        "description": "Disallow certain triple slash directives in favor of ES6-style import declarations",
        "recommended": "error",
        "url": "https://typescript-eslint.io/rules/triple-slash-reference"
      },
      "messages": {
        "tripleSlashReference": "Do not use a triple slash reference for {{module}}, use `import` style instead."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "lib": {
              "enum": ["always", "never"]
            },
            "path": {
              "enum": ["always", "never"]
            },
            "types": {
              "enum": ["always", "never", "prefer-import"]
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "type-annotation-spacing": {
    "defaultOptions": [{}],
    "meta": {
      "type": "layout",
      "docs": {
        "description": "Require consistent spacing around type annotations",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/type-annotation-spacing"
      },
      "fixable": "whitespace",
      "messages": {
        "expectedSpaceAfter": "Expected a space after the '{{type}}'.",
        "expectedSpaceBefore": "Expected a space before the '{{type}}'.",
        "unexpectedSpaceAfter": "Unexpected space after the '{{type}}'.",
        "unexpectedSpaceBefore": "Unexpected space before the '{{type}}'.",
        "unexpectedSpaceBetween": "Unexpected space between the '{{previousToken}}' and the '{{type}}'."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "before": {
              "type": "boolean"
            },
            "after": {
              "type": "boolean"
            },
            "overrides": {
              "type": "object",
              "properties": {
                "colon": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "arrow": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "variable": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "parameter": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "property": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                },
                "returnType": {
                  "type": "object",
                  "properties": {
                    "before": {
                      "type": "boolean"
                    },
                    "after": {
                      "type": "boolean"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    }
  },
  "typedef": {
    "defaultOptions": [
      {
        "arrayDestructuring": false,
        "arrowParameter": false,
        "memberVariableDeclaration": false,
        "objectDestructuring": false,
        "parameter": false,
        "propertyDeclaration": false,
        "variableDeclaration": false,
        "variableDeclarationIgnoreFunction": false
      }
    ],
    "meta": {
      "docs": {
        "description": "Require type annotations in certain places",
        "recommended": false,
        "url": "https://typescript-eslint.io/rules/typedef"
      },
      "messages": {
        "expectedTypedef": "Expected a type annotation.",
        "expectedTypedefNamed": "Expected {{name}} to have a type annotation."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "arrayDestructuring": {
              "type": "boolean"
            },
            "arrowParameter": {
              "type": "boolean"
            },
            "memberVariableDeclaration": {
              "type": "boolean"
            },
            "objectDestructuring": {
              "type": "boolean"
            },
            "parameter": {
              "type": "boolean"
            },
            "propertyDeclaration": {
              "type": "boolean"
            },
            "variableDeclaration": {
              "type": "boolean"
            },
            "variableDeclarationIgnoreFunction": {
              "type": "boolean"
            }
          }
        }
      ],
      "type": "suggestion"
    }
  },
  "unbound-method": {
    "defaultOptions": [
      {
        "ignoreStatic": false
      }
    ],
    "meta": {
      "docs": {
        "description": "Enforce unbound methods are called with their expected scope",
        "recommended": "error",
        "requiresTypeChecking": true,
        "url": "https://typescript-eslint.io/rules/unbound-method"
      },
      "messages": {
        "unbound": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.",
        "unboundWithoutThisAnnotation": "Avoid referencing unbound methods which may cause unintentional scoping of `this`.\nIf your function does not access `this`, you can annotate it with `this: void`, or consider using an arrow function instead."
      },
      "schema": [
        {
          "type": "object",
          "properties": {
            "ignoreStatic": {
              "description": "Whether to skip checking whether `static` methods are correctly bound.",
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      ],
      "type": "problem"
    }
  },
  "unified-signatures": {
    "defaultOptions": [
      {
        "ignoreDifferentlyNamedParameters": false
      }
    ],
    "meta": {
      "docs": {
        "description": "Disallow two overloads that could be unified into one with a union or an optional/rest parameter",
        "recommended": "strict",
        "url": "https://typescript-eslint.io/rules/unified-signatures"
      },
      "type": "suggestion",
      "messages": {
        "omittingRestParameter": "{{failureStringStart}} with a rest parameter.",
        "omittingSingleParameter": "{{failureStringStart}} with an optional parameter.",
        "singleParameterDifference": "{{failureStringStart}} taking `{{type1}} | {{type2}}`."
      },
      "schema": [
        {
          "additionalProperties": false,
          "properties": {
            "ignoreDifferentlyNamedParameters": {
              "description": "Whether two parameters with different names at the same index should be considered different even if their types are the same.",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      ]
    }
  }
}
